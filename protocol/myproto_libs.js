/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.protocol.CActivity');
goog.provide('proto.protocol.CApplePay');
goog.provide('proto.protocol.CArchieve');
goog.provide('proto.protocol.CBroadcastChat');
goog.provide('proto.protocol.CBroadcastChatText');
goog.provide('proto.protocol.CBroken');
goog.provide('proto.protocol.CBuild');
goog.provide('proto.protocol.CBuy');
goog.provide('proto.protocol.CChangeNickname');
goog.provide('proto.protocol.CChangeSex');
goog.provide('proto.protocol.CComein');
goog.provide('proto.protocol.CComeinRoomid');
goog.provide('proto.protocol.CConfig');
goog.provide('proto.protocol.CCreatePrivateRoom');
goog.provide('proto.protocol.CDelAllPost');
goog.provide('proto.protocol.CDelPost');
goog.provide('proto.protocol.CDelReadPost');
goog.provide('proto.protocol.CDiscard');
goog.provide('proto.protocol.CEnterSocialRoom');
goog.provide('proto.protocol.CFeedback');
goog.provide('proto.protocol.CGetActivityRewards');
goog.provide('proto.protocol.CGetCurrency');
goog.provide('proto.protocol.CHttpLogin');
goog.provide('proto.protocol.CHu');
goog.provide('proto.protocol.CIapppayOrder');
goog.provide('proto.protocol.CLaunchVote');
goog.provide('proto.protocol.CLogin');
goog.provide('proto.protocol.CMaiZi');
goog.provide('proto.protocol.CMiguLogin');
goog.provide('proto.protocol.CNotice');
goog.provide('proto.protocol.COpenAppendix');
goog.provide('proto.protocol.COperate');
goog.provide('proto.protocol.CPRecordByRid');
goog.provide('proto.protocol.CPing');
goog.provide('proto.protocol.CPost');
goog.provide('proto.protocol.CPrivateLeave');
goog.provide('proto.protocol.CPrivateRecord');
goog.provide('proto.protocol.CQiangKong');
goog.provide('proto.protocol.CReadPost');
goog.provide('proto.protocol.CReady');
goog.provide('proto.protocol.CRegist');
goog.provide('proto.protocol.CSetPasswd');
goog.provide('proto.protocol.CStartGame');
goog.provide('proto.protocol.CTrade');
goog.provide('proto.protocol.CTradeList');
goog.provide('proto.protocol.CTradeRecord');
goog.provide('proto.protocol.CTradeUserInfo');
goog.provide('proto.protocol.CUserData');
goog.provide('proto.protocol.CVote');
goog.provide('proto.protocol.CWechatLogin');
goog.provide('proto.protocol.CWechatShare');
goog.provide('proto.protocol.CWxpayOrder');
goog.provide('proto.protocol.CWxpayQuery');
goog.provide('proto.protocol.Error');
goog.provide('proto.protocol.LoginData');
goog.provide('proto.protocol.Notice');
goog.provide('proto.protocol.PostAppendixData');
goog.provide('proto.protocol.PostBoxData');
goog.provide('proto.protocol.PrivateDetails');
goog.provide('proto.protocol.PrivateRecord');
goog.provide('proto.protocol.PrivateRecordDetails');
goog.provide('proto.protocol.PrivateRecordForCircle');
goog.provide('proto.protocol.PrivateRecordForRoom');
goog.provide('proto.protocol.PrivateRecords');
goog.provide('proto.protocol.PrivateScore');
goog.provide('proto.protocol.ProtoActivity');
goog.provide('proto.protocol.ProtoCard');
goog.provide('proto.protocol.ProtoCount');
goog.provide('proto.protocol.ProtoRoom');
goog.provide('proto.protocol.ProtoTrade');
goog.provide('proto.protocol.ProtoTradeRecard');
goog.provide('proto.protocol.ProtoUser');
goog.provide('proto.protocol.ReLogin');
goog.provide('proto.protocol.ResVo');
goog.provide('proto.protocol.RoomAttrube');
goog.provide('proto.protocol.RoomData');
goog.provide('proto.protocol.SActivity');
goog.provide('proto.protocol.SApplePay');
goog.provide('proto.protocol.SArchieve');
goog.provide('proto.protocol.SBroadcastChat');
goog.provide('proto.protocol.SBroadcastChatText');
goog.provide('proto.protocol.SBroken');
goog.provide('proto.protocol.SBuild');
goog.provide('proto.protocol.SBuy');
goog.provide('proto.protocol.SChangeNickname');
goog.provide('proto.protocol.SChangeSex');
goog.provide('proto.protocol.SChenmi');
goog.provide('proto.protocol.SComein');
goog.provide('proto.protocol.SConfig');
goog.provide('proto.protocol.SCreatePrivateRoom');
goog.provide('proto.protocol.SDeal');
goog.provide('proto.protocol.SDelAllPost');
goog.provide('proto.protocol.SDelPost');
goog.provide('proto.protocol.SDelReadPost');
goog.provide('proto.protocol.SDiscard');
goog.provide('proto.protocol.SDraw');
goog.provide('proto.protocol.SEnterSocialRoom');
goog.provide('proto.protocol.SFeedback');
goog.provide('proto.protocol.SGameover');
goog.provide('proto.protocol.SGetActivityRewards');
goog.provide('proto.protocol.SGetCurrency');
goog.provide('proto.protocol.SHttpLogin');
goog.provide('proto.protocol.SHu');
goog.provide('proto.protocol.SIapppayOrder');
goog.provide('proto.protocol.SLaunchVote');
goog.provide('proto.protocol.SLogin');
goog.provide('proto.protocol.SMaiZi');
goog.provide('proto.protocol.SMiguLogin');
goog.provide('proto.protocol.SNotice');
goog.provide('proto.protocol.SOffline');
goog.provide('proto.protocol.SOpenAppendix');
goog.provide('proto.protocol.SOperate');
goog.provide('proto.protocol.SOtherComein');
goog.provide('proto.protocol.SOtherDraw');
goog.provide('proto.protocol.SPRecordByRid');
goog.provide('proto.protocol.SPengKong');
goog.provide('proto.protocol.SPing');
goog.provide('proto.protocol.SPost');
goog.provide('proto.protocol.SPrivateLeave');
goog.provide('proto.protocol.SPrivateOver');
goog.provide('proto.protocol.SPrivateRecord');
goog.provide('proto.protocol.SQiangKong');
goog.provide('proto.protocol.SReadPost');
goog.provide('proto.protocol.SReady');
goog.provide('proto.protocol.SRegist');
goog.provide('proto.protocol.SResource');
goog.provide('proto.protocol.SSetPasswd');
goog.provide('proto.protocol.SStart');
goog.provide('proto.protocol.SStartGame');
goog.provide('proto.protocol.STrade');
goog.provide('proto.protocol.STradeList');
goog.provide('proto.protocol.STradeRecord');
goog.provide('proto.protocol.STradeUserInfo');
goog.provide('proto.protocol.SUpdateActivity');
goog.provide('proto.protocol.SUserData');
goog.provide('proto.protocol.SVote');
goog.provide('proto.protocol.SVoteResult');
goog.provide('proto.protocol.SWaitBroken');
goog.provide('proto.protocol.SWechatLogin');
goog.provide('proto.protocol.SWxpayOrder');
goog.provide('proto.protocol.SWxpayQuery');
goog.provide('proto.protocol.SZhuang');
goog.provide('proto.protocol.SZhuangDeal');
goog.provide('proto.protocol.Sdisconnection');
goog.provide('proto.protocol.SysConfig');
goog.provide('proto.protocol.UserData');
goog.provide('proto.protocol.WidgetData');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SResource.repeatedFields_, null);
};
goog.inherits(proto.protocol.SResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SResource.displayName = 'proto.protocol.SResource';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SResource.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SResource.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SResource.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 5000),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.ResVo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SResource}
 */
proto.protocol.SResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SResource;
  return proto.protocol.SResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SResource}
 */
proto.protocol.SResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.ResVo;
      reader.readMessage(value,proto.protocol.ResVo.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.ResVo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SResource.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 5000));
};


/** @param {number} value */
proto.protocol.SResource.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SResource.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SResource.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ResVo list = 2;
 * @return {!Array.<!proto.protocol.ResVo>}
 */
proto.protocol.SResource.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.ResVo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ResVo, 2));
};


/** @param {!Array.<!proto.protocol.ResVo>} value */
proto.protocol.SResource.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.ResVo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ResVo}
 */
proto.protocol.SResource.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.ResVo, opt_index);
};


proto.protocol.SResource.prototype.clearListList = function() {
  this.setListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ResVo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ResVo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ResVo.displayName = 'proto.protocol.ResVo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ResVo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ResVo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ResVo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ResVo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ResVo}
 */
proto.protocol.ResVo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ResVo;
  return proto.protocol.ResVo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ResVo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ResVo}
 */
proto.protocol.ResVo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ResVo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ResVo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ResVo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ResVo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.ResVo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ResVo.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.ResVo.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ResVo.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 count = 3;
 * @return {number}
 */
proto.protocol.ResVo.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.ResVo.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.ResVo.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ResVo.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CGetCurrency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CGetCurrency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CGetCurrency.displayName = 'proto.protocol.CGetCurrency';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CGetCurrency.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CGetCurrency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CGetCurrency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CGetCurrency.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 5001)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CGetCurrency}
 */
proto.protocol.CGetCurrency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CGetCurrency;
  return proto.protocol.CGetCurrency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CGetCurrency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CGetCurrency}
 */
proto.protocol.CGetCurrency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CGetCurrency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CGetCurrency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CGetCurrency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CGetCurrency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CGetCurrency.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 5001));
};


/** @param {number} value */
proto.protocol.CGetCurrency.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CGetCurrency.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CGetCurrency.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SGetCurrency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SGetCurrency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SGetCurrency.displayName = 'proto.protocol.SGetCurrency';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SGetCurrency.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SGetCurrency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SGetCurrency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SGetCurrency.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 5001),
    coin: jspb.Message.getField(msg, 2),
    diamond: jspb.Message.getField(msg, 3),
    exchange: jspb.Message.getField(msg, 4),
    ticket: jspb.Message.getField(msg, 5),
    roomcard: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SGetCurrency}
 */
proto.protocol.SGetCurrency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SGetCurrency;
  return proto.protocol.SGetCurrency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SGetCurrency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SGetCurrency}
 */
proto.protocol.SGetCurrency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCoin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamond(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExchange(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTicket(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomcard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SGetCurrency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SGetCurrency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SGetCurrency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SGetCurrency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SGetCurrency.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 5001));
};


/** @param {number} value */
proto.protocol.SGetCurrency.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SGetCurrency.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGetCurrency.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 coin = 2;
 * @return {number}
 */
proto.protocol.SGetCurrency.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SGetCurrency.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SGetCurrency.prototype.clearCoin = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGetCurrency.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 diamond = 3;
 * @return {number}
 */
proto.protocol.SGetCurrency.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SGetCurrency.prototype.setDiamond = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SGetCurrency.prototype.clearDiamond = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGetCurrency.prototype.hasDiamond = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 exchange = 4;
 * @return {number}
 */
proto.protocol.SGetCurrency.prototype.getExchange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SGetCurrency.prototype.setExchange = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SGetCurrency.prototype.clearExchange = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGetCurrency.prototype.hasExchange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 ticket = 5;
 * @return {number}
 */
proto.protocol.SGetCurrency.prototype.getTicket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SGetCurrency.prototype.setTicket = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SGetCurrency.prototype.clearTicket = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGetCurrency.prototype.hasTicket = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 roomcard = 6;
 * @return {number}
 */
proto.protocol.SGetCurrency.prototype.getRoomcard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SGetCurrency.prototype.setRoomcard = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SGetCurrency.prototype.clearRoomcard = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGetCurrency.prototype.hasRoomcard = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.LoginData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.LoginData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.LoginData.displayName = 'proto.protocol.LoginData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.LoginData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.LoginData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.LoginData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.LoginData.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    nickname: jspb.Message.getField(msg, 2),
    sex: jspb.Message.getField(msg, 3),
    photo: jspb.Message.getField(msg, 4),
    roomcard: jspb.Message.getField(msg, 5),
    parent: jspb.Message.getField(msg, 6),
    timestamp: jspb.Message.getField(msg, 7),
    token: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.LoginData}
 */
proto.protocol.LoginData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.LoginData;
  return proto.protocol.LoginData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.LoginData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.LoginData}
 */
proto.protocol.LoginData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoto(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomcard(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.LoginData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.LoginData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.LoginData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.LoginData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * required string userid = 1;
 * @return {string}
 */
proto.protocol.LoginData.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.LoginData.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.LoginData.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.LoginData.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string nickname = 2;
 * @return {string}
 */
proto.protocol.LoginData.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.LoginData.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.LoginData.prototype.clearNickname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.LoginData.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 sex = 3;
 * @return {number}
 */
proto.protocol.LoginData.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.LoginData.prototype.setSex = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.LoginData.prototype.clearSex = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.LoginData.prototype.hasSex = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string photo = 4;
 * @return {string}
 */
proto.protocol.LoginData.prototype.getPhoto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.LoginData.prototype.setPhoto = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.LoginData.prototype.clearPhoto = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.LoginData.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 roomcard = 5;
 * @return {number}
 */
proto.protocol.LoginData.prototype.getRoomcard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.LoginData.prototype.setRoomcard = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.LoginData.prototype.clearRoomcard = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.LoginData.prototype.hasRoomcard = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string parent = 6;
 * @return {string}
 */
proto.protocol.LoginData.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protocol.LoginData.prototype.setParent = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.LoginData.prototype.clearParent = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.LoginData.prototype.hasParent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 timestamp = 7;
 * @return {number}
 */
proto.protocol.LoginData.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.LoginData.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.LoginData.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.LoginData.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required string token = 8;
 * @return {string}
 */
proto.protocol.LoginData.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.protocol.LoginData.prototype.setToken = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.LoginData.prototype.clearToken = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.LoginData.prototype.hasToken = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.UserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.UserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.UserData.displayName = 'proto.protocol.UserData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.UserData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.UserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.UserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.UserData.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    nickname: jspb.Message.getField(msg, 2),
    email: jspb.Message.getField(msg, 3),
    phone: jspb.Message.getField(msg, 4),
    sex: jspb.Message.getField(msg, 5),
    status: jspb.Message.getField(msg, 6),
    online: jspb.Message.getField(msg, 7),
    exp: jspb.Message.getField(msg, 8),
    ip: jspb.Message.getField(msg, 9),
    photo: jspb.Message.getField(msg, 10),
    address: jspb.Message.getField(msg, 11),
    createtime: jspb.Message.getField(msg, 12),
    sign: jspb.Message.getField(msg, 13),
    birth: jspb.Message.getField(msg, 14),
    terminal: jspb.Message.getField(msg, 15),
    coin: jspb.Message.getField(msg, 16),
    roomtype: jspb.Message.getField(msg, 18),
    roomid: jspb.Message.getField(msg, 19),
    invitecode: jspb.Message.getField(msg, 20),
    diamond: jspb.Message.getField(msg, 21),
    exchange: jspb.Message.getField(msg, 22),
    ticket: jspb.Message.getField(msg, 23),
    vip: jspb.Message.getField(msg, 24),
    win: jspb.Message.getField(msg, 25),
    lost: jspb.Message.getField(msg, 26),
    ping: jspb.Message.getField(msg, 27),
    platform: jspb.Message.getField(msg, 28),
    rupt: jspb.Message.getField(msg, 29),
    sound: jspb.Message.getField(msg, 30),
    roomcard: jspb.Message.getField(msg, 31),
    build: jspb.Message.getField(msg, 32),
    token: jspb.Message.getField(msg, 33)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.UserData}
 */
proto.protocol.UserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.UserData;
  return proto.protocol.UserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.UserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.UserData}
 */
proto.protocol.UserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIp(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoto(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreatetime(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSign(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBirth(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminal(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCoin(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomtype(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomid(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitecode(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamond(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExchange(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTicket(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVip(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWin(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLost(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPing(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlatform(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRupt(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSound(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomcard(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuild(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.UserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.UserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.UserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.UserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeUint32(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeUint32(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeUint32(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeUint32(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeUint32(
      29,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeBool(
      30,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeUint32(
      31,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeString(
      32,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeString(
      33,
      f
    );
  }
};


/**
 * required string userid = 1;
 * @return {string}
 */
proto.protocol.UserData.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.UserData.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string nickname = 2;
 * @return {string}
 */
proto.protocol.UserData.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.UserData.prototype.clearNickname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string email = 3;
 * @return {string}
 */
proto.protocol.UserData.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.UserData.prototype.clearEmail = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string phone = 4;
 * @return {string}
 */
proto.protocol.UserData.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.UserData.prototype.clearPhone = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 sex = 5;
 * @return {number}
 */
proto.protocol.UserData.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setSex = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.UserData.prototype.clearSex = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasSex = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 status = 6;
 * @return {number}
 */
proto.protocol.UserData.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.UserData.prototype.clearStatus = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required bool online = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.UserData.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.protocol.UserData.prototype.setOnline = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.UserData.prototype.clearOnline = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasOnline = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 exp = 8;
 * @return {number}
 */
proto.protocol.UserData.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setExp = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.UserData.prototype.clearExp = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasExp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required uint32 ip = 9;
 * @return {number}
 */
proto.protocol.UserData.prototype.getIp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setIp = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.protocol.UserData.prototype.clearIp = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasIp = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required string photo = 10;
 * @return {string}
 */
proto.protocol.UserData.prototype.getPhoto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setPhoto = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.protocol.UserData.prototype.clearPhoto = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required string address = 11;
 * @return {string}
 */
proto.protocol.UserData.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.protocol.UserData.prototype.clearAddress = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required uint32 createtime = 12;
 * @return {number}
 */
proto.protocol.UserData.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setCreatetime = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.protocol.UserData.prototype.clearCreatetime = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasCreatetime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required string sign = 13;
 * @return {string}
 */
proto.protocol.UserData.prototype.getSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setSign = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.protocol.UserData.prototype.clearSign = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasSign = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required uint32 birth = 14;
 * @return {number}
 */
proto.protocol.UserData.prototype.getBirth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setBirth = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.protocol.UserData.prototype.clearBirth = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasBirth = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required string terminal = 15;
 * @return {string}
 */
proto.protocol.UserData.prototype.getTerminal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setTerminal = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.protocol.UserData.prototype.clearTerminal = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasTerminal = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required uint32 coin = 16;
 * @return {number}
 */
proto.protocol.UserData.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.protocol.UserData.prototype.clearCoin = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * required uint32 roomtype = 18;
 * @return {number}
 */
proto.protocol.UserData.prototype.getRoomtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setRoomtype = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.protocol.UserData.prototype.clearRoomtype = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasRoomtype = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * required uint32 roomid = 19;
 * @return {number}
 */
proto.protocol.UserData.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.protocol.UserData.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * required string invitecode = 20;
 * @return {string}
 */
proto.protocol.UserData.prototype.getInvitecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setInvitecode = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.protocol.UserData.prototype.clearInvitecode = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasInvitecode = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * required uint32 diamond = 21;
 * @return {number}
 */
proto.protocol.UserData.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setDiamond = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.protocol.UserData.prototype.clearDiamond = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasDiamond = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * required uint32 exchange = 22;
 * @return {number}
 */
proto.protocol.UserData.prototype.getExchange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setExchange = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.protocol.UserData.prototype.clearExchange = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasExchange = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * required uint32 ticket = 23;
 * @return {number}
 */
proto.protocol.UserData.prototype.getTicket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setTicket = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.protocol.UserData.prototype.clearTicket = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasTicket = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * required uint32 vip = 24;
 * @return {number}
 */
proto.protocol.UserData.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setVip = function(value) {
  jspb.Message.setField(this, 24, value);
};


proto.protocol.UserData.prototype.clearVip = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasVip = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * required uint32 win = 25;
 * @return {number}
 */
proto.protocol.UserData.prototype.getWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setWin = function(value) {
  jspb.Message.setField(this, 25, value);
};


proto.protocol.UserData.prototype.clearWin = function() {
  jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasWin = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * required uint32 lost = 26;
 * @return {number}
 */
proto.protocol.UserData.prototype.getLost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setLost = function(value) {
  jspb.Message.setField(this, 26, value);
};


proto.protocol.UserData.prototype.clearLost = function() {
  jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasLost = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * required uint32 ping = 27;
 * @return {number}
 */
proto.protocol.UserData.prototype.getPing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setPing = function(value) {
  jspb.Message.setField(this, 27, value);
};


proto.protocol.UserData.prototype.clearPing = function() {
  jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasPing = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * required uint32 platform = 28;
 * @return {number}
 */
proto.protocol.UserData.prototype.getPlatform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 28, value);
};


proto.protocol.UserData.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * required uint32 rupt = 29;
 * @return {number}
 */
proto.protocol.UserData.prototype.getRupt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setRupt = function(value) {
  jspb.Message.setField(this, 29, value);
};


proto.protocol.UserData.prototype.clearRupt = function() {
  jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasRupt = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * required bool sound = 30;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.UserData.prototype.getSound = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 30, false));
};


/** @param {boolean} value */
proto.protocol.UserData.prototype.setSound = function(value) {
  jspb.Message.setField(this, 30, value);
};


proto.protocol.UserData.prototype.clearSound = function() {
  jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasSound = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * required uint32 roomcard = 31;
 * @return {number}
 */
proto.protocol.UserData.prototype.getRoomcard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.protocol.UserData.prototype.setRoomcard = function(value) {
  jspb.Message.setField(this, 31, value);
};


proto.protocol.UserData.prototype.clearRoomcard = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasRoomcard = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * required string build = 32;
 * @return {string}
 */
proto.protocol.UserData.prototype.getBuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setBuild = function(value) {
  jspb.Message.setField(this, 32, value);
};


proto.protocol.UserData.prototype.clearBuild = function() {
  jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasBuild = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * required string token = 33;
 * @return {string}
 */
proto.protocol.UserData.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/** @param {string} value */
proto.protocol.UserData.prototype.setToken = function(value) {
  jspb.Message.setField(this, 33, value);
};


proto.protocol.UserData.prototype.clearToken = function() {
  jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.UserData.prototype.hasToken = function() {
  return jspb.Message.getField(this, 33) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ProtoUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ProtoUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ProtoUser.displayName = 'proto.protocol.ProtoUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ProtoUser.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ProtoUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ProtoUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    nickname: jspb.Message.getField(msg, 2),
    email: jspb.Message.getField(msg, 3),
    position: jspb.Message.getField(msg, 4),
    sex: jspb.Message.getField(msg, 5),
    exp: jspb.Message.getField(msg, 6),
    photo: jspb.Message.getField(msg, 7),
    address: jspb.Message.getField(msg, 8),
    sign: jspb.Message.getField(msg, 9),
    terminal: jspb.Message.getField(msg, 10),
    coin: jspb.Message.getField(msg, 11),
    roomcard: jspb.Message.getField(msg, 12),
    exchange: jspb.Message.getField(msg, 13),
    ready: jspb.Message.getField(msg, 14),
    vip: jspb.Message.getField(msg, 15),
    win: jspb.Message.getField(msg, 16),
    lost: jspb.Message.getField(msg, 17),
    ping: jspb.Message.getField(msg, 18),
    ting: jspb.Message.getField(msg, 19),
    platform: jspb.Message.getField(msg, 20),
    score: jspb.Message.getField(msg, 21),
    maizi: jspb.Message.getField(msg, 22),
    ip: jspb.Message.getField(msg, 23),
    offline: jspb.Message.getField(msg, 24),
    longitude: +jspb.Message.getField(msg, 26),
    latitude: +jspb.Message.getField(msg, 27)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ProtoUser}
 */
proto.protocol.ProtoUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ProtoUser;
  return proto.protocol.ProtoUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ProtoUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ProtoUser}
 */
proto.protocol.ProtoUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoto(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSign(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminal(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCoin(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomcard(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExchange(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReady(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVip(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWin(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLost(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPing(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTing(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlatform(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaizi(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOffline(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ProtoUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ProtoUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ProtoUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeString(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeFloat(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeFloat(
      27,
      f
    );
  }
};


/**
 * required string userid = 1;
 * @return {string}
 */
proto.protocol.ProtoUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.ProtoUser.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.ProtoUser.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string nickname = 2;
 * @return {string}
 */
proto.protocol.ProtoUser.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.ProtoUser.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.ProtoUser.prototype.clearNickname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string email = 3;
 * @return {string}
 */
proto.protocol.ProtoUser.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.ProtoUser.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.ProtoUser.prototype.clearEmail = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 position = 4;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.ProtoUser.prototype.clearPosition = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 sex = 5;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setSex = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.ProtoUser.prototype.clearSex = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasSex = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 exp = 6;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setExp = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.ProtoUser.prototype.clearExp = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasExp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required string photo = 7;
 * @return {string}
 */
proto.protocol.ProtoUser.prototype.getPhoto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.protocol.ProtoUser.prototype.setPhoto = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.ProtoUser.prototype.clearPhoto = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required string address = 8;
 * @return {string}
 */
proto.protocol.ProtoUser.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.protocol.ProtoUser.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.ProtoUser.prototype.clearAddress = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required string sign = 9;
 * @return {string}
 */
proto.protocol.ProtoUser.prototype.getSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.protocol.ProtoUser.prototype.setSign = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.protocol.ProtoUser.prototype.clearSign = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasSign = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required string terminal = 10;
 * @return {string}
 */
proto.protocol.ProtoUser.prototype.getTerminal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.protocol.ProtoUser.prototype.setTerminal = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.protocol.ProtoUser.prototype.clearTerminal = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasTerminal = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required uint32 coin = 11;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.protocol.ProtoUser.prototype.clearCoin = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required uint32 roomcard = 12;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getRoomcard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setRoomcard = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.protocol.ProtoUser.prototype.clearRoomcard = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasRoomcard = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required uint32 exchange = 13;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getExchange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setExchange = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.protocol.ProtoUser.prototype.clearExchange = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasExchange = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required bool ready = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.ProtoUser.prototype.getReady = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.protocol.ProtoUser.prototype.setReady = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.protocol.ProtoUser.prototype.clearReady = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasReady = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required uint32 vip = 15;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setVip = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.protocol.ProtoUser.prototype.clearVip = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasVip = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required uint32 win = 16;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setWin = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.protocol.ProtoUser.prototype.clearWin = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasWin = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * required uint32 lost = 17;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getLost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setLost = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.protocol.ProtoUser.prototype.clearLost = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasLost = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * required uint32 ping = 18;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getPing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setPing = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.protocol.ProtoUser.prototype.clearPing = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasPing = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * required uint32 ting = 19;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getTing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setTing = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.protocol.ProtoUser.prototype.clearTing = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasTing = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * required uint32 platform = 20;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getPlatform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.protocol.ProtoUser.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * required int32 score = 21;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setScore = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.protocol.ProtoUser.prototype.clearScore = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasScore = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * required int32 maizi = 22;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getMaizi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setMaizi = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.protocol.ProtoUser.prototype.clearMaizi = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasMaizi = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * required string ip = 23;
 * @return {string}
 */
proto.protocol.ProtoUser.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.protocol.ProtoUser.prototype.setIp = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.protocol.ProtoUser.prototype.clearIp = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasIp = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * required bool offline = 24;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.ProtoUser.prototype.getOffline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 24, false));
};


/** @param {boolean} value */
proto.protocol.ProtoUser.prototype.setOffline = function(value) {
  jspb.Message.setField(this, 24, value);
};


proto.protocol.ProtoUser.prototype.clearOffline = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasOffline = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * required float longitude = 26;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 26, 0.0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 26, value);
};


proto.protocol.ProtoUser.prototype.clearLongitude = function() {
  jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * required float latitude = 27;
 * @return {number}
 */
proto.protocol.ProtoUser.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 27, 0.0));
};


/** @param {number} value */
proto.protocol.ProtoUser.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 27, value);
};


proto.protocol.ProtoUser.prototype.clearLatitude = function() {
  jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoUser.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 27) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.RoomAttrube = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.RoomAttrube, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.RoomAttrube.displayName = 'proto.protocol.RoomAttrube';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.RoomAttrube.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.RoomAttrube.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.RoomAttrube} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.RoomAttrube.toObject = function(includeInstance, msg) {
  var f, obj = {
    rtype: jspb.Message.getField(msg, 1),
    ante: jspb.Message.getField(msg, 2),
    maxcount: jspb.Message.getField(msg, 3),
    percent: jspb.Message.getField(msg, 4),
    access: jspb.Message.getField(msg, 5),
    pb_private: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.RoomAttrube}
 */
proto.protocol.RoomAttrube.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.RoomAttrube;
  return proto.protocol.RoomAttrube.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.RoomAttrube} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.RoomAttrube}
 */
proto.protocol.RoomAttrube.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnte(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPercent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccess(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.RoomAttrube.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.RoomAttrube.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.RoomAttrube} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.RoomAttrube.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * required uint32 rtype = 1;
 * @return {number}
 */
proto.protocol.RoomAttrube.prototype.getRtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.RoomAttrube.prototype.setRtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.RoomAttrube.prototype.clearRtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomAttrube.prototype.hasRtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 ante = 2;
 * @return {number}
 */
proto.protocol.RoomAttrube.prototype.getAnte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.RoomAttrube.prototype.setAnte = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.RoomAttrube.prototype.clearAnte = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomAttrube.prototype.hasAnte = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 maxcount = 3;
 * @return {number}
 */
proto.protocol.RoomAttrube.prototype.getMaxcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.RoomAttrube.prototype.setMaxcount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.RoomAttrube.prototype.clearMaxcount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomAttrube.prototype.hasMaxcount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 percent = 4;
 * @return {number}
 */
proto.protocol.RoomAttrube.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.RoomAttrube.prototype.setPercent = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.RoomAttrube.prototype.clearPercent = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomAttrube.prototype.hasPercent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 access = 5;
 * @return {number}
 */
proto.protocol.RoomAttrube.prototype.getAccess = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.RoomAttrube.prototype.setAccess = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.RoomAttrube.prototype.clearAccess = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomAttrube.prototype.hasAccess = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 private = 6;
 * @return {number}
 */
proto.protocol.RoomAttrube.prototype.getPrivate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.RoomAttrube.prototype.setPrivate = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.RoomAttrube.prototype.clearPrivate = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomAttrube.prototype.hasPrivate = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.RoomData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.RoomData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.RoomData.displayName = 'proto.protocol.RoomData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.RoomData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.RoomData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.RoomData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.RoomData.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getField(msg, 1),
    rtype: jspb.Message.getField(msg, 2),
    rname: jspb.Message.getField(msg, 3),
    expire: jspb.Message.getField(msg, 4),
    count: jspb.Message.getField(msg, 5),
    cid: jspb.Message.getField(msg, 6),
    invitecode: jspb.Message.getField(msg, 7),
    audience: jspb.Message.getField(msg, 8),
    pub: jspb.Message.getField(msg, 9),
    maizi: jspb.Message.getField(msg, 10),
    horse: jspb.Message.getField(msg, 11),
    zhuang: jspb.Message.getField(msg, 12),
    round: jspb.Message.getField(msg, 13),
    userid: jspb.Message.getField(msg, 14),
    ma: jspb.Message.getField(msg, 15),
    lian: jspb.Message.getField(msg, 16),
    totalround: jspb.Message.getField(msg, 17)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.RoomData}
 */
proto.protocol.RoomData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.RoomData;
  return proto.protocol.RoomData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.RoomData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.RoomData}
 */
proto.protocol.RoomData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpire(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitecode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAudience(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPub(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMaizi(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHorse(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setZhuang(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMa(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLian(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalround(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.RoomData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.RoomData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.RoomData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.RoomData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeUint32(
      17,
      f
    );
  }
};


/**
 * required uint32 roomid = 1;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.RoomData.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 rtype = 2;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getRtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setRtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.RoomData.prototype.clearRtype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasRtype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string rname = 3;
 * @return {string}
 */
proto.protocol.RoomData.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.RoomData.prototype.setRname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.RoomData.prototype.clearRname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasRname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 expire = 4;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getExpire = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setExpire = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.RoomData.prototype.clearExpire = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasExpire = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 count = 5;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setCount = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.RoomData.prototype.clearCount = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasCount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 cid = 6;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getCid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setCid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.RoomData.prototype.clearCid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasCid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required string invitecode = 7;
 * @return {string}
 */
proto.protocol.RoomData.prototype.getInvitecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.protocol.RoomData.prototype.setInvitecode = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.RoomData.prototype.clearInvitecode = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasInvitecode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 audience = 8;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getAudience = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setAudience = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.RoomData.prototype.clearAudience = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasAudience = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required uint32 pub = 9;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getPub = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setPub = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.protocol.RoomData.prototype.clearPub = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasPub = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required bool maizi = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.RoomData.prototype.getMaizi = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.protocol.RoomData.prototype.setMaizi = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.protocol.RoomData.prototype.clearMaizi = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasMaizi = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required uint32 horse = 11;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getHorse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setHorse = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.protocol.RoomData.prototype.clearHorse = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasHorse = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required uint32 zhuang = 12;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getZhuang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setZhuang = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.protocol.RoomData.prototype.clearZhuang = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasZhuang = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required uint32 round = 13;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setRound = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.protocol.RoomData.prototype.clearRound = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasRound = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required string userid = 14;
 * @return {string}
 */
proto.protocol.RoomData.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.protocol.RoomData.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.protocol.RoomData.prototype.clearUserid = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required uint32 ma = 15;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getMa = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setMa = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.protocol.RoomData.prototype.clearMa = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasMa = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required uint32 lian = 16;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getLian = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setLian = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.protocol.RoomData.prototype.clearLian = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasLian = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * required uint32 totalround = 17;
 * @return {number}
 */
proto.protocol.RoomData.prototype.getTotalround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protocol.RoomData.prototype.setTotalround = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.protocol.RoomData.prototype.clearTotalround = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.RoomData.prototype.hasTotalround = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ProtoRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ProtoRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ProtoRoom.displayName = 'proto.protocol.ProtoRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ProtoRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ProtoRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ProtoRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    ante: jspb.Message.getField(msg, 1),
    roomid: jspb.Message.getField(msg, 2),
    zhuang: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ProtoRoom}
 */
proto.protocol.ProtoRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ProtoRoom;
  return proto.protocol.ProtoRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ProtoRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ProtoRoom}
 */
proto.protocol.ProtoRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnte(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setZhuang(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ProtoRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ProtoRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ProtoRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint32 ante = 1;
 * @return {number}
 */
proto.protocol.ProtoRoom.prototype.getAnte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.ProtoRoom.prototype.setAnte = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.ProtoRoom.prototype.clearAnte = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoRoom.prototype.hasAnte = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 roomid = 2;
 * @return {number}
 */
proto.protocol.ProtoRoom.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ProtoRoom.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.ProtoRoom.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoRoom.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 zhuang = 3;
 * @return {number}
 */
proto.protocol.ProtoRoom.prototype.getZhuang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.ProtoRoom.prototype.setZhuang = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.ProtoRoom.prototype.clearZhuang = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoRoom.prototype.hasZhuang = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PrivateRecordForCircle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PrivateRecordForCircle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PrivateRecordForCircle.displayName = 'proto.protocol.PrivateRecordForCircle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PrivateRecordForCircle.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PrivateRecordForCircle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PrivateRecordForCircle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecordForCircle.toObject = function(includeInstance, msg) {
  var f, obj = {
    rid: jspb.Message.getField(msg, 1),
    rname: jspb.Message.getField(msg, 2),
    time: jspb.Message.getField(msg, 3),
    rtype: jspb.Message.getField(msg, 4),
    coin: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PrivateRecordForCircle}
 */
proto.protocol.PrivateRecordForCircle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PrivateRecordForCircle;
  return proto.protocol.PrivateRecordForCircle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PrivateRecordForCircle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PrivateRecordForCircle}
 */
proto.protocol.PrivateRecordForCircle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRtype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PrivateRecordForCircle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PrivateRecordForCircle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PrivateRecordForCircle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecordForCircle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required uint32 rid = 1;
 * @return {number}
 */
proto.protocol.PrivateRecordForCircle.prototype.getRid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecordForCircle.prototype.setRid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PrivateRecordForCircle.prototype.clearRid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordForCircle.prototype.hasRid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string rname = 2;
 * @return {string}
 */
proto.protocol.PrivateRecordForCircle.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.PrivateRecordForCircle.prototype.setRname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.PrivateRecordForCircle.prototype.clearRname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordForCircle.prototype.hasRname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 time = 3;
 * @return {number}
 */
proto.protocol.PrivateRecordForCircle.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecordForCircle.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.PrivateRecordForCircle.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordForCircle.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 rtype = 4;
 * @return {number}
 */
proto.protocol.PrivateRecordForCircle.prototype.getRtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecordForCircle.prototype.setRtype = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.PrivateRecordForCircle.prototype.clearRtype = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordForCircle.prototype.hasRtype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 coin = 5;
 * @return {number}
 */
proto.protocol.PrivateRecordForCircle.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecordForCircle.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.PrivateRecordForCircle.prototype.clearCoin = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordForCircle.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PrivateRecordForRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PrivateRecordForRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PrivateRecordForRoom.displayName = 'proto.protocol.PrivateRecordForRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PrivateRecordForRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PrivateRecordForRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PrivateRecordForRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecordForRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    uname: jspb.Message.getField(msg, 1),
    photo: jspb.Message.getField(msg, 2),
    coin: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PrivateRecordForRoom}
 */
proto.protocol.PrivateRecordForRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PrivateRecordForRoom;
  return proto.protocol.PrivateRecordForRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PrivateRecordForRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PrivateRecordForRoom}
 */
proto.protocol.PrivateRecordForRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoto(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PrivateRecordForRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PrivateRecordForRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PrivateRecordForRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecordForRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required string uname = 1;
 * @return {string}
 */
proto.protocol.PrivateRecordForRoom.prototype.getUname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.PrivateRecordForRoom.prototype.setUname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PrivateRecordForRoom.prototype.clearUname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordForRoom.prototype.hasUname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string photo = 2;
 * @return {string}
 */
proto.protocol.PrivateRecordForRoom.prototype.getPhoto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.PrivateRecordForRoom.prototype.setPhoto = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.PrivateRecordForRoom.prototype.clearPhoto = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordForRoom.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 coin = 3;
 * @return {number}
 */
proto.protocol.PrivateRecordForRoom.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecordForRoom.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.PrivateRecordForRoom.prototype.clearCoin = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordForRoom.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ProtoCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.ProtoCard.repeatedFields_, null);
};
goog.inherits(proto.protocol.ProtoCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ProtoCard.displayName = 'proto.protocol.ProtoCard';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ProtoCard.repeatedFields_ = [1,2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ProtoCard.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ProtoCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ProtoCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    pengList: jspb.Message.getRepeatedField(msg, 1),
    kongList: jspb.Message.getRepeatedField(msg, 2),
    outcards: msg.getOutcards_asB64(),
    seat: jspb.Message.getField(msg, 4),
    chowList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ProtoCard}
 */
proto.protocol.ProtoCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ProtoCard;
  return proto.protocol.ProtoCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ProtoCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ProtoCard}
 */
proto.protocol.ProtoCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addPeng(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addKong(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutcards(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addChow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ProtoCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ProtoCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ProtoCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPengList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = message.getKongList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getChowList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      5,
      f
    );
  }
};


/**
 * repeated uint32 peng = 1;
 * @return {!Array.<number>}
 */
proto.protocol.ProtoCard.prototype.getPengList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.protocol.ProtoCard.prototype.setPengList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protocol.ProtoCard.prototype.addPeng = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.protocol.ProtoCard.prototype.clearPengList = function() {
  this.setPengList([]);
};


/**
 * repeated uint32 kong = 2;
 * @return {!Array.<number>}
 */
proto.protocol.ProtoCard.prototype.getKongList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.protocol.ProtoCard.prototype.setKongList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protocol.ProtoCard.prototype.addKong = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.protocol.ProtoCard.prototype.clearKongList = function() {
  this.setKongList([]);
};


/**
 * required bytes outcards = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ProtoCard.prototype.getOutcards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes outcards = 3;
 * This is a type-conversion wrapper around `getOutcards()`
 * @return {string}
 */
proto.protocol.ProtoCard.prototype.getOutcards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutcards()));
};


/**
 * required bytes outcards = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutcards()`
 * @return {!Uint8Array}
 */
proto.protocol.ProtoCard.prototype.getOutcards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutcards()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.ProtoCard.prototype.setOutcards = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.ProtoCard.prototype.clearOutcards = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCard.prototype.hasOutcards = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 seat = 4;
 * @return {number}
 */
proto.protocol.ProtoCard.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.ProtoCard.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.ProtoCard.prototype.clearSeat = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCard.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated uint32 chow = 5;
 * @return {!Array.<number>}
 */
proto.protocol.ProtoCard.prototype.getChowList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.protocol.ProtoCard.prototype.setChowList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protocol.ProtoCard.prototype.addChow = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.protocol.ProtoCard.prototype.clearChowList = function() {
  this.setChowList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ProtoCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ProtoCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ProtoCount.displayName = 'proto.protocol.ProtoCount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ProtoCount.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ProtoCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ProtoCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getField(msg, 1),
    cards: msg.getCards_asB64(),
    hu: jspb.Message.getField(msg, 3),
    hutypefan: jspb.Message.getField(msg, 4),
    hufan: jspb.Message.getField(msg, 5),
    maizi: jspb.Message.getField(msg, 7),
    total: jspb.Message.getField(msg, 8),
    coin: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ProtoCount}
 */
proto.protocol.ProtoCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ProtoCount;
  return proto.protocol.ProtoCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ProtoCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ProtoCount}
 */
proto.protocol.ProtoCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHu(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHutypefan(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHufan(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaizi(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ProtoCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ProtoCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ProtoCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * required uint32 seat = 1;
 * @return {number}
 */
proto.protocol.ProtoCount.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.ProtoCount.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.ProtoCount.prototype.clearSeat = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCount.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes cards = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.ProtoCount.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes cards = 2;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.protocol.ProtoCount.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * required bytes cards = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.protocol.ProtoCount.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.ProtoCount.prototype.setCards = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.ProtoCount.prototype.clearCards = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCount.prototype.hasCards = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 hu = 3;
 * @return {number}
 */
proto.protocol.ProtoCount.prototype.getHu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.ProtoCount.prototype.setHu = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.ProtoCount.prototype.clearHu = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCount.prototype.hasHu = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 huTypeFan = 4;
 * @return {number}
 */
proto.protocol.ProtoCount.prototype.getHutypefan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.ProtoCount.prototype.setHutypefan = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.ProtoCount.prototype.clearHutypefan = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCount.prototype.hasHutypefan = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 huFan = 5;
 * @return {number}
 */
proto.protocol.ProtoCount.prototype.getHufan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.ProtoCount.prototype.setHufan = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.ProtoCount.prototype.clearHufan = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCount.prototype.hasHufan = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 maizi = 7;
 * @return {number}
 */
proto.protocol.ProtoCount.prototype.getMaizi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.ProtoCount.prototype.setMaizi = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.ProtoCount.prototype.clearMaizi = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCount.prototype.hasMaizi = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 total = 8;
 * @return {number}
 */
proto.protocol.ProtoCount.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.ProtoCount.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.ProtoCount.prototype.clearTotal = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCount.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 coin = 9;
 * @return {number}
 */
proto.protocol.ProtoCount.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.ProtoCount.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.protocol.ProtoCount.prototype.clearCoin = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoCount.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PostBoxData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PostBoxData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PostBoxData.displayName = 'proto.protocol.PostBoxData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PostBoxData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PostBoxData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PostBoxData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PostBoxData.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getField(msg, 1),
    content: jspb.Message.getField(msg, 2),
    appendixname: jspb.Message.getField(msg, 3),
    expire: jspb.Message.getField(msg, 4),
    sendername: jspb.Message.getField(msg, 5),
    senderuserid: jspb.Message.getField(msg, 6),
    read: jspb.Message.getField(msg, 7),
    draw: jspb.Message.getField(msg, 8),
    kind: jspb.Message.getField(msg, 9),
    id: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PostBoxData}
 */
proto.protocol.PostBoxData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PostBoxData;
  return proto.protocol.PostBoxData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PostBoxData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PostBoxData}
 */
proto.protocol.PostBoxData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppendixname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpire(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendername(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderuserid(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRead(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDraw(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKind(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PostBoxData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PostBoxData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PostBoxData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PostBoxData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * required string title = 1;
 * @return {string}
 */
proto.protocol.PostBoxData.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.PostBoxData.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PostBoxData.prototype.clearTitle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string content = 2;
 * @return {string}
 */
proto.protocol.PostBoxData.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.PostBoxData.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.PostBoxData.prototype.clearContent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string appendixname = 3;
 * @return {string}
 */
proto.protocol.PostBoxData.prototype.getAppendixname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.PostBoxData.prototype.setAppendixname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.PostBoxData.prototype.clearAppendixname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasAppendixname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 expire = 4;
 * @return {number}
 */
proto.protocol.PostBoxData.prototype.getExpire = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.PostBoxData.prototype.setExpire = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.PostBoxData.prototype.clearExpire = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasExpire = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string sendername = 5;
 * @return {string}
 */
proto.protocol.PostBoxData.prototype.getSendername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protocol.PostBoxData.prototype.setSendername = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.PostBoxData.prototype.clearSendername = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasSendername = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string senderuserid = 6;
 * @return {string}
 */
proto.protocol.PostBoxData.prototype.getSenderuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protocol.PostBoxData.prototype.setSenderuserid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.PostBoxData.prototype.clearSenderuserid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasSenderuserid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required bool read = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.PostBoxData.prototype.getRead = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.protocol.PostBoxData.prototype.setRead = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.PostBoxData.prototype.clearRead = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasRead = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required bool draw = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.PostBoxData.prototype.getDraw = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.protocol.PostBoxData.prototype.setDraw = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.PostBoxData.prototype.clearDraw = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasDraw = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required uint32 kind = 9;
 * @return {number}
 */
proto.protocol.PostBoxData.prototype.getKind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.PostBoxData.prototype.setKind = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.protocol.PostBoxData.prototype.clearKind = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasKind = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required uint32 id = 10;
 * @return {number}
 */
proto.protocol.PostBoxData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.protocol.PostBoxData.prototype.setId = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.protocol.PostBoxData.prototype.clearId = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostBoxData.prototype.hasId = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PostAppendixData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.PostAppendixData.repeatedFields_, null);
};
goog.inherits(proto.protocol.PostAppendixData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PostAppendixData.displayName = 'proto.protocol.PostAppendixData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.PostAppendixData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PostAppendixData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PostAppendixData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PostAppendixData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PostAppendixData.toObject = function(includeInstance, msg) {
  var f, obj = {
    postid: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    widgetsList: jspb.Message.toObjectList(msg.getWidgetsList(),
    proto.protocol.WidgetData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PostAppendixData}
 */
proto.protocol.PostAppendixData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PostAppendixData;
  return proto.protocol.PostAppendixData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PostAppendixData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PostAppendixData}
 */
proto.protocol.PostAppendixData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPostid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.protocol.WidgetData;
      reader.readMessage(value,proto.protocol.WidgetData.deserializeBinaryFromReader);
      msg.addWidgets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PostAppendixData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PostAppendixData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PostAppendixData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PostAppendixData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWidgetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.protocol.WidgetData.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 postid = 1;
 * @return {number}
 */
proto.protocol.PostAppendixData.prototype.getPostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.PostAppendixData.prototype.setPostid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PostAppendixData.prototype.clearPostid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostAppendixData.prototype.hasPostid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.protocol.PostAppendixData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.PostAppendixData.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.PostAppendixData.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PostAppendixData.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WidgetData widgets = 3;
 * @return {!Array.<!proto.protocol.WidgetData>}
 */
proto.protocol.PostAppendixData.prototype.getWidgetsList = function() {
  return /** @type{!Array.<!proto.protocol.WidgetData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.WidgetData, 3));
};


/** @param {!Array.<!proto.protocol.WidgetData>} value */
proto.protocol.PostAppendixData.prototype.setWidgetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.protocol.WidgetData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.WidgetData}
 */
proto.protocol.PostAppendixData.prototype.addWidgets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protocol.WidgetData, opt_index);
};


proto.protocol.PostAppendixData.prototype.clearWidgetsList = function() {
  this.setWidgetsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.WidgetData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.WidgetData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.WidgetData.displayName = 'proto.protocol.WidgetData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.WidgetData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.WidgetData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.WidgetData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.WidgetData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.WidgetData}
 */
proto.protocol.WidgetData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.WidgetData;
  return proto.protocol.WidgetData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.WidgetData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.WidgetData}
 */
proto.protocol.WidgetData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.WidgetData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.WidgetData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.WidgetData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.WidgetData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.protocol.WidgetData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.WidgetData.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.WidgetData.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.WidgetData.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 count = 2;
 * @return {number}
 */
proto.protocol.WidgetData.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.WidgetData.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.WidgetData.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.WidgetData.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CConfig.displayName = 'proto.protocol.CConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 4000)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CConfig}
 */
proto.protocol.CConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CConfig;
  return proto.protocol.CConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CConfig}
 */
proto.protocol.CConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CConfig.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 4000));
};


/** @param {number} value */
proto.protocol.CConfig.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CConfig.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CConfig.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SConfig.repeatedFields_, null);
};
goog.inherits(proto.protocol.SConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SConfig.displayName = 'proto.protocol.SConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 4000),
    roomList: jspb.Message.toObjectList(msg.getRoomList(),
    proto.protocol.RoomAttrube.toObject, includeInstance),
    sys: (f = msg.getSys()) && proto.protocol.SysConfig.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SConfig}
 */
proto.protocol.SConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SConfig;
  return proto.protocol.SConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SConfig}
 */
proto.protocol.SConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.RoomAttrube;
      reader.readMessage(value,proto.protocol.RoomAttrube.deserializeBinaryFromReader);
      msg.addRoom(value);
      break;
    case 4:
      var value = new proto.protocol.SysConfig;
      reader.readMessage(value,proto.protocol.SysConfig.deserializeBinaryFromReader);
      msg.setSys(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRoomList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.RoomAttrube.serializeBinaryToWriter
    );
  }
  f = message.getSys();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protocol.SysConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SConfig.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 4000));
};


/** @param {number} value */
proto.protocol.SConfig.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SConfig.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SConfig.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RoomAttrube room = 2;
 * @return {!Array.<!proto.protocol.RoomAttrube>}
 */
proto.protocol.SConfig.prototype.getRoomList = function() {
  return /** @type{!Array.<!proto.protocol.RoomAttrube>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.RoomAttrube, 2));
};


/** @param {!Array.<!proto.protocol.RoomAttrube>} value */
proto.protocol.SConfig.prototype.setRoomList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.RoomAttrube=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.RoomAttrube}
 */
proto.protocol.SConfig.prototype.addRoom = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.RoomAttrube, opt_index);
};


proto.protocol.SConfig.prototype.clearRoomList = function() {
  this.setRoomList([]);
};


/**
 * required SysConfig sys = 4;
 * @return {!proto.protocol.SysConfig}
 */
proto.protocol.SConfig.prototype.getSys = function() {
  return /** @type{!proto.protocol.SysConfig} */ (
    jspb.Message.getWrapperField(this, proto.protocol.SysConfig, 4, 1));
};


/** @param {!proto.protocol.SysConfig} value */
proto.protocol.SConfig.prototype.setSys = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.protocol.SConfig.prototype.clearSys = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SConfig.prototype.hasSys = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 error = 6;
 * @return {number}
 */
proto.protocol.SConfig.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SConfig.prototype.setError = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SConfig.prototype.clearError = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SConfig.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SysConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SysConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SysConfig.displayName = 'proto.protocol.SysConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SysConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SysConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SysConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SysConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageserver: jspb.Message.getField(msg, 1),
    discardtimeout: jspb.Message.getField(msg, 2),
    version: jspb.Message.getField(msg, 3),
    feedbackserver: jspb.Message.getField(msg, 4),
    shareaddr: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SysConfig}
 */
proto.protocol.SysConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SysConfig;
  return proto.protocol.SysConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SysConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SysConfig}
 */
proto.protocol.SysConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageserver(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiscardtimeout(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedbackserver(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareaddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SysConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SysConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SysConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SysConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required string imageserver = 1;
 * @return {string}
 */
proto.protocol.SysConfig.prototype.getImageserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.SysConfig.prototype.setImageserver = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SysConfig.prototype.clearImageserver = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SysConfig.prototype.hasImageserver = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 discardtimeout = 2;
 * @return {number}
 */
proto.protocol.SysConfig.prototype.getDiscardtimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SysConfig.prototype.setDiscardtimeout = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SysConfig.prototype.clearDiscardtimeout = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SysConfig.prototype.hasDiscardtimeout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string version = 3;
 * @return {string}
 */
proto.protocol.SysConfig.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.SysConfig.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SysConfig.prototype.clearVersion = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SysConfig.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string feedbackserver = 4;
 * @return {string}
 */
proto.protocol.SysConfig.prototype.getFeedbackserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.SysConfig.prototype.setFeedbackserver = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SysConfig.prototype.clearFeedbackserver = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SysConfig.prototype.hasFeedbackserver = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string shareaddr = 5;
 * @return {string}
 */
proto.protocol.SysConfig.prototype.getShareaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protocol.SysConfig.prototype.setShareaddr = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SysConfig.prototype.clearShareaddr = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SysConfig.prototype.hasShareaddr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.protocol.Error = {
  USERNAMEORPWDERROR: 13009,
  USERNAMEEMPTY: 13010,
  REGISTERROR: 13012,
  PWDEMPTY: 13011,
  PHONEREGISTED: 13016,
  PHONENUMBERERROR: 13017,
  PWDFORMATERROR: 13018,
  PHONENUMBERENPTY: 13019,
  USERDATANOTEXIST: 14001,
  WECHATLOINGFAILREAUTH: 14003,
  GETWECHATUSERINFOFAIL: 14004,
  HTTP_LOGIN_EXPIRE: 14006,
  HTTP_LOGIN_TOKEN_FAIL: 14007,
  HTTP_LOGIN_USERDATA_NIL: 14008,
  HTTP_LOGIN_USERID_NIL: 14009,
  HTTP_LOGIN_USER_NOT_REGIST: 14010,
  NOTINROOMCANNOTLEAVE: 20002,
  GAMESTARTEDCANNOTLEAVE: 20001,
  NOTYOURTURN: 20003,
  BUYALREADY: 20004,
  NOOPERATE: 20005,
  NOSTARTED: 20006,
  GAMEROUNDILLEGAL: 20008,
  GAMEMAIZIILLEGAL: 20009,
  CARDVALUEZERO: 20007,
  NOTINROOM: 20018,
  NOTENOUGHCOIN: 20019,
  STARTEDNOTKICK: 20023,
  CREATEROOMFAIL: 30012,
  ROOMNOTEXIST: 30016,
  ROOMFULL: 30018,
  NOTINPRIVATEROOM: 30019,
  RUNNINGNOTVOTE: 30032,
  VOTINGCANTLAUNCHVOTE: 30033,
  NOTVOTETIME: 30034,
  NAMETOOLONG: 40002,
  SEXVALUERANGEOUT: 40004,
  FEEDFACKERROR: 40005,
  NOTENOUGH_ROOM_CARD: 40007,
  NOTICELISTENPTY: 40008,
  DATAOUTOFRANGE: 40009,
  IPAYORDERFAIL: 62001,
  POSTBOXEMPTY: 69001,
  POSTNOTEXIST: 69002,
  APPENDIXNOTEXIST: 69003,
  PRIVATERECORDEMPTY: 68004
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CHttpLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CHttpLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CHttpLogin.displayName = 'proto.protocol.CHttpLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CHttpLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CHttpLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CHttpLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CHttpLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1026),
    userid: jspb.Message.getField(msg, 2),
    timestamp: jspb.Message.getField(msg, 3),
    createtime: jspb.Message.getField(msg, 4),
    token: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CHttpLogin}
 */
proto.protocol.CHttpLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CHttpLogin;
  return proto.protocol.CHttpLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CHttpLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CHttpLogin}
 */
proto.protocol.CHttpLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreatetime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CHttpLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CHttpLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CHttpLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CHttpLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CHttpLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1026));
};


/** @param {number} value */
proto.protocol.CHttpLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CHttpLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CHttpLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userid = 2;
 * @return {string}
 */
proto.protocol.CHttpLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CHttpLogin.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CHttpLogin.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CHttpLogin.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 timestamp = 3;
 * @return {number}
 */
proto.protocol.CHttpLogin.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.CHttpLogin.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CHttpLogin.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CHttpLogin.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 createtime = 4;
 * @return {number}
 */
proto.protocol.CHttpLogin.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.CHttpLogin.prototype.setCreatetime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.CHttpLogin.prototype.clearCreatetime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CHttpLogin.prototype.hasCreatetime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string token = 5;
 * @return {string}
 */
proto.protocol.CHttpLogin.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protocol.CHttpLogin.prototype.setToken = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.CHttpLogin.prototype.clearToken = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CHttpLogin.prototype.hasToken = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SHttpLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SHttpLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SHttpLogin.displayName = 'proto.protocol.SHttpLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SHttpLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SHttpLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SHttpLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SHttpLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1026),
    userid: jspb.Message.getField(msg, 3),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SHttpLogin}
 */
proto.protocol.SHttpLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SHttpLogin;
  return proto.protocol.SHttpLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SHttpLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SHttpLogin}
 */
proto.protocol.SHttpLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SHttpLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SHttpLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SHttpLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SHttpLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SHttpLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1026));
};


/** @param {number} value */
proto.protocol.SHttpLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SHttpLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SHttpLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userid = 3;
 * @return {string}
 */
proto.protocol.SHttpLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.SHttpLogin.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SHttpLogin.prototype.clearUserid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SHttpLogin.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SHttpLogin.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SHttpLogin.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SHttpLogin.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SHttpLogin.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CLogin.displayName = 'proto.protocol.CLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1000),
    userid: jspb.Message.getField(msg, 2),
    phone: jspb.Message.getField(msg, 3),
    password: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CLogin}
 */
proto.protocol.CLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CLogin;
  return proto.protocol.CLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CLogin}
 */
proto.protocol.CLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1000));
};


/** @param {number} value */
proto.protocol.CLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string userid = 2;
 * @return {string}
 */
proto.protocol.CLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CLogin.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CLogin.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CLogin.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string phone = 3;
 * @return {string}
 */
proto.protocol.CLogin.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.CLogin.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CLogin.prototype.clearPhone = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CLogin.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string password = 4;
 * @return {string}
 */
proto.protocol.CLogin.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.CLogin.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.CLogin.prototype.clearPassword = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CLogin.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SLogin.displayName = 'proto.protocol.SLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1000),
    userid: jspb.Message.getField(msg, 2),
    unixtime: jspb.Message.getField(msg, 3),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SLogin}
 */
proto.protocol.SLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SLogin;
  return proto.protocol.SLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SLogin}
 */
proto.protocol.SLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnixtime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1000));
};


/** @param {number} value */
proto.protocol.SLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userid = 2;
 * @return {string}
 */
proto.protocol.SLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.SLogin.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SLogin.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SLogin.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 unixtime = 3;
 * @return {number}
 */
proto.protocol.SLogin.prototype.getUnixtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SLogin.prototype.setUnixtime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SLogin.prototype.clearUnixtime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SLogin.prototype.hasUnixtime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SLogin.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SLogin.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SLogin.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SLogin.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CMiguLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CMiguLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CMiguLogin.displayName = 'proto.protocol.CMiguLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CMiguLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CMiguLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CMiguLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CMiguLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1001),
    sessionkey: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CMiguLogin}
 */
proto.protocol.CMiguLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CMiguLogin;
  return proto.protocol.CMiguLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CMiguLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CMiguLogin}
 */
proto.protocol.CMiguLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CMiguLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CMiguLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CMiguLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CMiguLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CMiguLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1001));
};


/** @param {number} value */
proto.protocol.CMiguLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CMiguLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CMiguLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sessionkey = 2;
 * @return {string}
 */
proto.protocol.CMiguLogin.prototype.getSessionkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CMiguLogin.prototype.setSessionkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CMiguLogin.prototype.clearSessionkey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CMiguLogin.prototype.hasSessionkey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SMiguLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SMiguLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SMiguLogin.displayName = 'proto.protocol.SMiguLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SMiguLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SMiguLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SMiguLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SMiguLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1001),
    userid: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SMiguLogin}
 */
proto.protocol.SMiguLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SMiguLogin;
  return proto.protocol.SMiguLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SMiguLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SMiguLogin}
 */
proto.protocol.SMiguLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SMiguLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SMiguLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SMiguLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SMiguLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SMiguLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1001));
};


/** @param {number} value */
proto.protocol.SMiguLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SMiguLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SMiguLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userid = 2;
 * @return {string}
 */
proto.protocol.SMiguLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.SMiguLogin.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SMiguLogin.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SMiguLogin.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SMiguLogin.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SMiguLogin.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SMiguLogin.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SMiguLogin.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ReLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ReLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ReLogin.displayName = 'proto.protocol.ReLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ReLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ReLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ReLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ReLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1010),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ReLogin}
 */
proto.protocol.ReLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ReLogin;
  return proto.protocol.ReLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ReLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ReLogin}
 */
proto.protocol.ReLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ReLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ReLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ReLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ReLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.ReLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1010));
};


/** @param {number} value */
proto.protocol.ReLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.ReLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ReLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 error = 2;
 * @return {number}
 */
proto.protocol.ReLogin.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ReLogin.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.ReLogin.prototype.clearError = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ReLogin.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CRegist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CRegist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CRegist.displayName = 'proto.protocol.CRegist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CRegist.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CRegist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CRegist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CRegist.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1022),
    nickname: jspb.Message.getField(msg, 2),
    phone: jspb.Message.getField(msg, 3),
    pwd: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CRegist}
 */
proto.protocol.CRegist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CRegist;
  return proto.protocol.CRegist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CRegist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CRegist}
 */
proto.protocol.CRegist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPwd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CRegist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CRegist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CRegist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CRegist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CRegist.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1022));
};


/** @param {number} value */
proto.protocol.CRegist.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CRegist.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CRegist.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string nickname = 2;
 * @return {string}
 */
proto.protocol.CRegist.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CRegist.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CRegist.prototype.clearNickname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CRegist.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string phone = 3;
 * @return {string}
 */
proto.protocol.CRegist.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.CRegist.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CRegist.prototype.clearPhone = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CRegist.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string pwd = 4;
 * @return {string}
 */
proto.protocol.CRegist.prototype.getPwd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.CRegist.prototype.setPwd = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.CRegist.prototype.clearPwd = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CRegist.prototype.hasPwd = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SRegist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SRegist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SRegist.displayName = 'proto.protocol.SRegist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SRegist.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SRegist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SRegist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SRegist.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1022),
    userid: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SRegist}
 */
proto.protocol.SRegist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SRegist;
  return proto.protocol.SRegist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SRegist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SRegist}
 */
proto.protocol.SRegist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SRegist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SRegist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SRegist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SRegist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SRegist.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1022));
};


/** @param {number} value */
proto.protocol.SRegist.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SRegist.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SRegist.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string userid = 2;
 * @return {string}
 */
proto.protocol.SRegist.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.SRegist.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SRegist.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SRegist.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SRegist.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SRegist.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SRegist.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SRegist.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CSetPasswd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CSetPasswd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CSetPasswd.displayName = 'proto.protocol.CSetPasswd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CSetPasswd.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CSetPasswd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CSetPasswd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CSetPasswd.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1023),
    pwd: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CSetPasswd}
 */
proto.protocol.CSetPasswd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CSetPasswd;
  return proto.protocol.CSetPasswd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CSetPasswd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CSetPasswd}
 */
proto.protocol.CSetPasswd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPwd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CSetPasswd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CSetPasswd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CSetPasswd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CSetPasswd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CSetPasswd.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1023));
};


/** @param {number} value */
proto.protocol.CSetPasswd.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CSetPasswd.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CSetPasswd.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string pwd = 2;
 * @return {string}
 */
proto.protocol.CSetPasswd.prototype.getPwd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CSetPasswd.prototype.setPwd = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CSetPasswd.prototype.clearPwd = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CSetPasswd.prototype.hasPwd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SSetPasswd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SSetPasswd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SSetPasswd.displayName = 'proto.protocol.SSetPasswd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SSetPasswd.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SSetPasswd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SSetPasswd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SSetPasswd.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1023),
    result: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SSetPasswd}
 */
proto.protocol.SSetPasswd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SSetPasswd;
  return proto.protocol.SSetPasswd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SSetPasswd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SSetPasswd}
 */
proto.protocol.SSetPasswd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SSetPasswd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SSetPasswd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SSetPasswd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SSetPasswd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SSetPasswd.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1023));
};


/** @param {number} value */
proto.protocol.SSetPasswd.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SSetPasswd.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SSetPasswd.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result = 2;
 * @return {number}
 */
proto.protocol.SSetPasswd.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SSetPasswd.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SSetPasswd.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SSetPasswd.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SSetPasswd.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SSetPasswd.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SSetPasswd.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SSetPasswd.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Sdisconnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Sdisconnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Sdisconnection.displayName = 'proto.protocol.Sdisconnection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Sdisconnection.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Sdisconnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Sdisconnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Sdisconnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1032),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Sdisconnection}
 */
proto.protocol.Sdisconnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Sdisconnection;
  return proto.protocol.Sdisconnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Sdisconnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Sdisconnection}
 */
proto.protocol.Sdisconnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Sdisconnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Sdisconnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Sdisconnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Sdisconnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.Sdisconnection.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1032));
};


/** @param {number} value */
proto.protocol.Sdisconnection.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.Sdisconnection.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Sdisconnection.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 error = 2;
 * @return {number}
 */
proto.protocol.Sdisconnection.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.Sdisconnection.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.Sdisconnection.prototype.clearError = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Sdisconnection.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CWechatLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CWechatLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CWechatLogin.displayName = 'proto.protocol.CWechatLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CWechatLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CWechatLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CWechatLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CWechatLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1024),
    appid: jspb.Message.getField(msg, 2),
    secret: jspb.Message.getField(msg, 3),
    codeId: jspb.Message.getField(msg, 4),
    grantType: jspb.Message.getField(msg, 5),
    token: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CWechatLogin}
 */
proto.protocol.CWechatLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CWechatLogin;
  return proto.protocol.CWechatLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CWechatLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CWechatLogin}
 */
proto.protocol.CWechatLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodeId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrantType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CWechatLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CWechatLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CWechatLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CWechatLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CWechatLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1024));
};


/** @param {number} value */
proto.protocol.CWechatLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CWechatLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWechatLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string appid = 2;
 * @return {string}
 */
proto.protocol.CWechatLogin.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CWechatLogin.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CWechatLogin.prototype.clearAppid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWechatLogin.prototype.hasAppid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string secret = 3;
 * @return {string}
 */
proto.protocol.CWechatLogin.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.CWechatLogin.prototype.setSecret = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CWechatLogin.prototype.clearSecret = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWechatLogin.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string code_id = 4;
 * @return {string}
 */
proto.protocol.CWechatLogin.prototype.getCodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.CWechatLogin.prototype.setCodeId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.CWechatLogin.prototype.clearCodeId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWechatLogin.prototype.hasCodeId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string grant_type = 5;
 * @return {string}
 */
proto.protocol.CWechatLogin.prototype.getGrantType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protocol.CWechatLogin.prototype.setGrantType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.CWechatLogin.prototype.clearGrantType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWechatLogin.prototype.hasGrantType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string token = 6;
 * @return {string}
 */
proto.protocol.CWechatLogin.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protocol.CWechatLogin.prototype.setToken = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.CWechatLogin.prototype.clearToken = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWechatLogin.prototype.hasToken = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SWechatLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SWechatLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SWechatLogin.displayName = 'proto.protocol.SWechatLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SWechatLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SWechatLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SWechatLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SWechatLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1024),
    userid: jspb.Message.getField(msg, 2),
    token: jspb.Message.getField(msg, 3),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SWechatLogin}
 */
proto.protocol.SWechatLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SWechatLogin;
  return proto.protocol.SWechatLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SWechatLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SWechatLogin}
 */
proto.protocol.SWechatLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SWechatLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SWechatLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SWechatLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SWechatLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SWechatLogin.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1024));
};


/** @param {number} value */
proto.protocol.SWechatLogin.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SWechatLogin.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWechatLogin.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userid = 2;
 * @return {string}
 */
proto.protocol.SWechatLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.SWechatLogin.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SWechatLogin.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWechatLogin.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string token = 3;
 * @return {string}
 */
proto.protocol.SWechatLogin.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.SWechatLogin.prototype.setToken = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SWechatLogin.prototype.clearToken = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWechatLogin.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SWechatLogin.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SWechatLogin.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SWechatLogin.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWechatLogin.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CPost.displayName = 'proto.protocol.CPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7701)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CPost}
 */
proto.protocol.CPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CPost;
  return proto.protocol.CPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CPost}
 */
proto.protocol.CPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7701));
};


/** @param {number} value */
proto.protocol.CPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SPost.repeatedFields_, null);
};
goog.inherits(proto.protocol.SPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SPost.displayName = 'proto.protocol.SPost';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SPost.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7701),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.protocol.PostBoxData.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SPost}
 */
proto.protocol.SPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SPost;
  return proto.protocol.SPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SPost}
 */
proto.protocol.SPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.PostBoxData;
      reader.readMessage(value,proto.protocol.PostBoxData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.PostBoxData.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7701));
};


/** @param {number} value */
proto.protocol.SPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PostBoxData data = 2;
 * @return {!Array.<!proto.protocol.PostBoxData>}
 */
proto.protocol.SPost.prototype.getDataList = function() {
  return /** @type{!Array.<!proto.protocol.PostBoxData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.PostBoxData, 2));
};


/** @param {!Array.<!proto.protocol.PostBoxData>} value */
proto.protocol.SPost.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.PostBoxData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.PostBoxData}
 */
proto.protocol.SPost.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.PostBoxData, opt_index);
};


proto.protocol.SPost.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SPost.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SPost.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SPost.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPost.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CDelPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CDelPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CDelPost.displayName = 'proto.protocol.CDelPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CDelPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CDelPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CDelPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CDelPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7702),
    postid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CDelPost}
 */
proto.protocol.CDelPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CDelPost;
  return proto.protocol.CDelPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CDelPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CDelPost}
 */
proto.protocol.CDelPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPostid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CDelPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CDelPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CDelPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CDelPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CDelPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7702));
};


/** @param {number} value */
proto.protocol.CDelPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CDelPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CDelPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 postid = 2;
 * @return {number}
 */
proto.protocol.CDelPost.prototype.getPostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CDelPost.prototype.setPostid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CDelPost.prototype.clearPostid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CDelPost.prototype.hasPostid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SDelPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SDelPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SDelPost.displayName = 'proto.protocol.SDelPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SDelPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SDelPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SDelPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDelPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7702),
    postid: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SDelPost}
 */
proto.protocol.SDelPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SDelPost;
  return proto.protocol.SDelPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SDelPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SDelPost}
 */
proto.protocol.SDelPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPostid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SDelPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SDelPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SDelPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDelPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SDelPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7702));
};


/** @param {number} value */
proto.protocol.SDelPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SDelPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDelPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 postid = 2;
 * @return {number}
 */
proto.protocol.SDelPost.prototype.getPostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SDelPost.prototype.setPostid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SDelPost.prototype.clearPostid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDelPost.prototype.hasPostid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SDelPost.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SDelPost.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SDelPost.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDelPost.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CDelReadPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CDelReadPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CDelReadPost.displayName = 'proto.protocol.CDelReadPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CDelReadPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CDelReadPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CDelReadPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CDelReadPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7703)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CDelReadPost}
 */
proto.protocol.CDelReadPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CDelReadPost;
  return proto.protocol.CDelReadPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CDelReadPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CDelReadPost}
 */
proto.protocol.CDelReadPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CDelReadPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CDelReadPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CDelReadPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CDelReadPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CDelReadPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7703));
};


/** @param {number} value */
proto.protocol.CDelReadPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CDelReadPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CDelReadPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SDelReadPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SDelReadPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SDelReadPost.displayName = 'proto.protocol.SDelReadPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SDelReadPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SDelReadPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SDelReadPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDelReadPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7703),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SDelReadPost}
 */
proto.protocol.SDelReadPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SDelReadPost;
  return proto.protocol.SDelReadPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SDelReadPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SDelReadPost}
 */
proto.protocol.SDelReadPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SDelReadPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SDelReadPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SDelReadPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDelReadPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SDelReadPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7703));
};


/** @param {number} value */
proto.protocol.SDelReadPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SDelReadPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDelReadPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 error = 2;
 * @return {number}
 */
proto.protocol.SDelReadPost.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SDelReadPost.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SDelReadPost.prototype.clearError = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDelReadPost.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CDelAllPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CDelAllPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CDelAllPost.displayName = 'proto.protocol.CDelAllPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CDelAllPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CDelAllPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CDelAllPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CDelAllPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7704)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CDelAllPost}
 */
proto.protocol.CDelAllPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CDelAllPost;
  return proto.protocol.CDelAllPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CDelAllPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CDelAllPost}
 */
proto.protocol.CDelAllPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CDelAllPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CDelAllPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CDelAllPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CDelAllPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CDelAllPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7704));
};


/** @param {number} value */
proto.protocol.CDelAllPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CDelAllPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CDelAllPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SDelAllPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SDelAllPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SDelAllPost.displayName = 'proto.protocol.SDelAllPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SDelAllPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SDelAllPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SDelAllPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDelAllPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7704),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SDelAllPost}
 */
proto.protocol.SDelAllPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SDelAllPost;
  return proto.protocol.SDelAllPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SDelAllPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SDelAllPost}
 */
proto.protocol.SDelAllPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SDelAllPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SDelAllPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SDelAllPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDelAllPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SDelAllPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7704));
};


/** @param {number} value */
proto.protocol.SDelAllPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SDelAllPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDelAllPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 error = 2;
 * @return {number}
 */
proto.protocol.SDelAllPost.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SDelAllPost.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SDelAllPost.prototype.clearError = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDelAllPost.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.COpenAppendix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.COpenAppendix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.COpenAppendix.displayName = 'proto.protocol.COpenAppendix';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.COpenAppendix.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.COpenAppendix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.COpenAppendix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.COpenAppendix.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7705),
    postid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.COpenAppendix}
 */
proto.protocol.COpenAppendix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.COpenAppendix;
  return proto.protocol.COpenAppendix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.COpenAppendix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.COpenAppendix}
 */
proto.protocol.COpenAppendix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPostid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.COpenAppendix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.COpenAppendix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.COpenAppendix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.COpenAppendix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.COpenAppendix.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7705));
};


/** @param {number} value */
proto.protocol.COpenAppendix.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.COpenAppendix.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.COpenAppendix.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 postid = 2;
 * @return {number}
 */
proto.protocol.COpenAppendix.prototype.getPostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.COpenAppendix.prototype.setPostid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.COpenAppendix.prototype.clearPostid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.COpenAppendix.prototype.hasPostid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SOpenAppendix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SOpenAppendix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SOpenAppendix.displayName = 'proto.protocol.SOpenAppendix';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SOpenAppendix.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SOpenAppendix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SOpenAppendix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOpenAppendix.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7705),
    data: (f = msg.getData()) && proto.protocol.PostAppendixData.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SOpenAppendix}
 */
proto.protocol.SOpenAppendix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SOpenAppendix;
  return proto.protocol.SOpenAppendix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SOpenAppendix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SOpenAppendix}
 */
proto.protocol.SOpenAppendix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.PostAppendixData;
      reader.readMessage(value,proto.protocol.PostAppendixData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SOpenAppendix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SOpenAppendix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SOpenAppendix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOpenAppendix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.PostAppendixData.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SOpenAppendix.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7705));
};


/** @param {number} value */
proto.protocol.SOpenAppendix.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SOpenAppendix.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOpenAppendix.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required PostAppendixData data = 2;
 * @return {!proto.protocol.PostAppendixData}
 */
proto.protocol.SOpenAppendix.prototype.getData = function() {
  return /** @type{!proto.protocol.PostAppendixData} */ (
    jspb.Message.getWrapperField(this, proto.protocol.PostAppendixData, 2, 1));
};


/** @param {!proto.protocol.PostAppendixData} value */
proto.protocol.SOpenAppendix.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.SOpenAppendix.prototype.clearData = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOpenAppendix.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SOpenAppendix.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SOpenAppendix.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SOpenAppendix.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOpenAppendix.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CReadPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CReadPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CReadPost.displayName = 'proto.protocol.CReadPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CReadPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CReadPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CReadPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CReadPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7706),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CReadPost}
 */
proto.protocol.CReadPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CReadPost;
  return proto.protocol.CReadPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CReadPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CReadPost}
 */
proto.protocol.CReadPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CReadPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CReadPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CReadPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CReadPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CReadPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7706));
};


/** @param {number} value */
proto.protocol.CReadPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CReadPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CReadPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.CReadPost.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CReadPost.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CReadPost.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CReadPost.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SReadPost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SReadPost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SReadPost.displayName = 'proto.protocol.SReadPost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SReadPost.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SReadPost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SReadPost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SReadPost.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7706),
    id: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SReadPost}
 */
proto.protocol.SReadPost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SReadPost;
  return proto.protocol.SReadPost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SReadPost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SReadPost}
 */
proto.protocol.SReadPost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SReadPost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SReadPost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SReadPost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SReadPost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SReadPost.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7706));
};


/** @param {number} value */
proto.protocol.SReadPost.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SReadPost.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SReadPost.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.SReadPost.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SReadPost.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SReadPost.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SReadPost.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SReadPost.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SReadPost.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SReadPost.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SReadPost.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CComein = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CComein, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CComein.displayName = 'proto.protocol.CComein';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CComein.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CComein.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CComein} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CComein.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2000),
    rtype: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CComein}
 */
proto.protocol.CComein.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CComein;
  return proto.protocol.CComein.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CComein} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CComein}
 */
proto.protocol.CComein.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CComein.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CComein.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CComein} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CComein.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CComein.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2000));
};


/** @param {number} value */
proto.protocol.CComein.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CComein.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CComein.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 rtype = 2;
 * @return {number}
 */
proto.protocol.CComein.prototype.getRtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CComein.prototype.setRtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CComein.prototype.clearRtype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CComein.prototype.hasRtype = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SComein = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SComein.repeatedFields_, null);
};
goog.inherits(proto.protocol.SComein, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SComein.displayName = 'proto.protocol.SComein';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SComein.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SComein.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SComein.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SComein} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SComein.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2000),
    position: jspb.Message.getField(msg, 2),
    room: (f = msg.getRoom()) && proto.protocol.ProtoRoom.toObject(includeInstance, f),
    userinfoList: jspb.Message.toObjectList(msg.getUserinfoList(),
    proto.protocol.ProtoUser.toObject, includeInstance),
    rtype: jspb.Message.getField(msg, 5),
    error: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SComein}
 */
proto.protocol.SComein.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SComein;
  return proto.protocol.SComein.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SComein} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SComein}
 */
proto.protocol.SComein.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 3:
      var value = new proto.protocol.ProtoRoom;
      reader.readMessage(value,proto.protocol.ProtoRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 4:
      var value = new proto.protocol.ProtoUser;
      reader.readMessage(value,proto.protocol.ProtoUser.deserializeBinaryFromReader);
      msg.addUserinfo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRtype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SComein.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SComein.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SComein} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SComein.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.ProtoRoom.serializeBinaryToWriter
    );
  }
  f = message.getUserinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protocol.ProtoUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SComein.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2000));
};


/** @param {number} value */
proto.protocol.SComein.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SComein.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SComein.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 Position = 2;
 * @return {number}
 */
proto.protocol.SComein.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SComein.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SComein.prototype.clearPosition = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SComein.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required ProtoRoom room = 3;
 * @return {!proto.protocol.ProtoRoom}
 */
proto.protocol.SComein.prototype.getRoom = function() {
  return /** @type{!proto.protocol.ProtoRoom} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ProtoRoom, 3, 1));
};


/** @param {!proto.protocol.ProtoRoom} value */
proto.protocol.SComein.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.SComein.prototype.clearRoom = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SComein.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ProtoUser userinfo = 4;
 * @return {!Array.<!proto.protocol.ProtoUser>}
 */
proto.protocol.SComein.prototype.getUserinfoList = function() {
  return /** @type{!Array.<!proto.protocol.ProtoUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ProtoUser, 4));
};


/** @param {!Array.<!proto.protocol.ProtoUser>} value */
proto.protocol.SComein.prototype.setUserinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protocol.ProtoUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ProtoUser}
 */
proto.protocol.SComein.prototype.addUserinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.ProtoUser, opt_index);
};


proto.protocol.SComein.prototype.clearUserinfoList = function() {
  this.setUserinfoList([]);
};


/**
 * required uint32 rtype = 5;
 * @return {number}
 */
proto.protocol.SComein.prototype.getRtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SComein.prototype.setRtype = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SComein.prototype.clearRtype = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SComein.prototype.hasRtype = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 error = 6;
 * @return {number}
 */
proto.protocol.SComein.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SComein.prototype.setError = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SComein.prototype.clearError = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SComein.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SOtherComein = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SOtherComein, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SOtherComein.displayName = 'proto.protocol.SOtherComein';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SOtherComein.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SOtherComein.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SOtherComein} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOtherComein.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2001),
    userinfo: (f = msg.getUserinfo()) && proto.protocol.ProtoUser.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SOtherComein}
 */
proto.protocol.SOtherComein.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SOtherComein;
  return proto.protocol.SOtherComein.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SOtherComein} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SOtherComein}
 */
proto.protocol.SOtherComein.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.ProtoUser;
      reader.readMessage(value,proto.protocol.ProtoUser.deserializeBinaryFromReader);
      msg.setUserinfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SOtherComein.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SOtherComein.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SOtherComein} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOtherComein.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUserinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.ProtoUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SOtherComein.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2001));
};


/** @param {number} value */
proto.protocol.SOtherComein.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SOtherComein.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOtherComein.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required ProtoUser userinfo = 2;
 * @return {!proto.protocol.ProtoUser}
 */
proto.protocol.SOtherComein.prototype.getUserinfo = function() {
  return /** @type{!proto.protocol.ProtoUser} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ProtoUser, 2, 1));
};


/** @param {!proto.protocol.ProtoUser} value */
proto.protocol.SOtherComein.prototype.setUserinfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.SOtherComein.prototype.clearUserinfo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOtherComein.prototype.hasUserinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SOtherComein.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SOtherComein.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SOtherComein.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOtherComein.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SZhuang = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SZhuang, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SZhuang.displayName = 'proto.protocol.SZhuang';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SZhuang.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SZhuang.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SZhuang} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SZhuang.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2002),
    zhuang: jspb.Message.getField(msg, 2),
    lian: jspb.Message.getField(msg, 3),
    watchseat: jspb.Message.getField(msg, 4),
    error: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SZhuang}
 */
proto.protocol.SZhuang.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SZhuang;
  return proto.protocol.SZhuang.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SZhuang} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SZhuang}
 */
proto.protocol.SZhuang.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setZhuang(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLian(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWatchseat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SZhuang.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SZhuang.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SZhuang} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SZhuang.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SZhuang.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2002));
};


/** @param {number} value */
proto.protocol.SZhuang.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SZhuang.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuang.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 zhuang = 2;
 * @return {number}
 */
proto.protocol.SZhuang.prototype.getZhuang = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SZhuang.prototype.setZhuang = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SZhuang.prototype.clearZhuang = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuang.prototype.hasZhuang = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 lian = 3;
 * @return {number}
 */
proto.protocol.SZhuang.prototype.getLian = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SZhuang.prototype.setLian = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SZhuang.prototype.clearLian = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuang.prototype.hasLian = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 watchseat = 4;
 * @return {number}
 */
proto.protocol.SZhuang.prototype.getWatchseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SZhuang.prototype.setWatchseat = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SZhuang.prototype.clearWatchseat = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuang.prototype.hasWatchseat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 error = 5;
 * @return {number}
 */
proto.protocol.SZhuang.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SZhuang.prototype.setError = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SZhuang.prototype.clearError = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuang.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CComeinRoomid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CComeinRoomid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CComeinRoomid.displayName = 'proto.protocol.CComeinRoomid';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CComeinRoomid.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CComeinRoomid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CComeinRoomid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CComeinRoomid.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2003),
    roomid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CComeinRoomid}
 */
proto.protocol.CComeinRoomid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CComeinRoomid;
  return proto.protocol.CComeinRoomid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CComeinRoomid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CComeinRoomid}
 */
proto.protocol.CComeinRoomid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CComeinRoomid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CComeinRoomid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CComeinRoomid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CComeinRoomid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CComeinRoomid.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2003));
};


/** @param {number} value */
proto.protocol.CComeinRoomid.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CComeinRoomid.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CComeinRoomid.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 roomid = 2;
 * @return {number}
 */
proto.protocol.CComeinRoomid.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CComeinRoomid.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CComeinRoomid.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CComeinRoomid.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SWaitBroken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SWaitBroken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SWaitBroken.displayName = 'proto.protocol.SWaitBroken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SWaitBroken.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SWaitBroken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SWaitBroken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SWaitBroken.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2008)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SWaitBroken}
 */
proto.protocol.SWaitBroken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SWaitBroken;
  return proto.protocol.SWaitBroken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SWaitBroken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SWaitBroken}
 */
proto.protocol.SWaitBroken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SWaitBroken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SWaitBroken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SWaitBroken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SWaitBroken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SWaitBroken.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2008));
};


/** @param {number} value */
proto.protocol.SWaitBroken.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SWaitBroken.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWaitBroken.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CBroken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CBroken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CBroken.displayName = 'proto.protocol.CBroken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CBroken.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CBroken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CBroken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBroken.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2007)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CBroken}
 */
proto.protocol.CBroken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CBroken;
  return proto.protocol.CBroken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CBroken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CBroken}
 */
proto.protocol.CBroken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CBroken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CBroken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CBroken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBroken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CBroken.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2007));
};


/** @param {number} value */
proto.protocol.CBroken.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CBroken.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBroken.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SBroken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SBroken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SBroken.displayName = 'proto.protocol.SBroken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SBroken.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SBroken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SBroken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBroken.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2007),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SBroken}
 */
proto.protocol.SBroken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SBroken;
  return proto.protocol.SBroken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SBroken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SBroken}
 */
proto.protocol.SBroken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SBroken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SBroken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SBroken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBroken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SBroken.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2007));
};


/** @param {number} value */
proto.protocol.SBroken.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SBroken.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroken.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 error = 2;
 * @return {number}
 */
proto.protocol.SBroken.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SBroken.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SBroken.prototype.clearError = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroken.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SZhuangDeal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SZhuangDeal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SZhuangDeal.displayName = 'proto.protocol.SZhuangDeal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SZhuangDeal.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SZhuangDeal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SZhuangDeal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SZhuangDeal.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2037),
    dice: jspb.Message.getField(msg, 2),
    cards: msg.getCards_asB64(),
    value: jspb.Message.getField(msg, 4),
    luckycard: jspb.Message.getField(msg, 5),
    error: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SZhuangDeal}
 */
proto.protocol.SZhuangDeal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SZhuangDeal;
  return proto.protocol.SZhuangDeal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SZhuangDeal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SZhuangDeal}
 */
proto.protocol.SZhuangDeal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDice(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLuckycard(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SZhuangDeal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SZhuangDeal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SZhuangDeal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SZhuangDeal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SZhuangDeal.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2037));
};


/** @param {number} value */
proto.protocol.SZhuangDeal.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SZhuangDeal.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuangDeal.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 dice = 2;
 * @return {number}
 */
proto.protocol.SZhuangDeal.prototype.getDice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SZhuangDeal.prototype.setDice = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SZhuangDeal.prototype.clearDice = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuangDeal.prototype.hasDice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes cards = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.SZhuangDeal.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes cards = 3;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.protocol.SZhuangDeal.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * required bytes cards = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.protocol.SZhuangDeal.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.SZhuangDeal.prototype.setCards = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SZhuangDeal.prototype.clearCards = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuangDeal.prototype.hasCards = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 value = 4;
 * @return {number}
 */
proto.protocol.SZhuangDeal.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SZhuangDeal.prototype.setValue = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SZhuangDeal.prototype.clearValue = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuangDeal.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 luckyCard = 5;
 * @return {number}
 */
proto.protocol.SZhuangDeal.prototype.getLuckycard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SZhuangDeal.prototype.setLuckycard = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SZhuangDeal.prototype.clearLuckycard = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuangDeal.prototype.hasLuckycard = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 error = 6;
 * @return {number}
 */
proto.protocol.SZhuangDeal.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SZhuangDeal.prototype.setError = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SZhuangDeal.prototype.clearError = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SZhuangDeal.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SDeal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SDeal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SDeal.displayName = 'proto.protocol.SDeal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SDeal.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SDeal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SDeal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDeal.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2004),
    dice: jspb.Message.getField(msg, 2),
    cards: msg.getCards_asB64(),
    value: jspb.Message.getField(msg, 4),
    luckycard: jspb.Message.getField(msg, 5),
    error: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SDeal}
 */
proto.protocol.SDeal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SDeal;
  return proto.protocol.SDeal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SDeal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SDeal}
 */
proto.protocol.SDeal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDice(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLuckycard(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SDeal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SDeal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SDeal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDeal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SDeal.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2004));
};


/** @param {number} value */
proto.protocol.SDeal.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SDeal.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDeal.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 dice = 2;
 * @return {number}
 */
proto.protocol.SDeal.prototype.getDice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SDeal.prototype.setDice = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SDeal.prototype.clearDice = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDeal.prototype.hasDice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes cards = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.SDeal.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes cards = 3;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.protocol.SDeal.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * required bytes cards = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.protocol.SDeal.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.SDeal.prototype.setCards = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SDeal.prototype.clearCards = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDeal.prototype.hasCards = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 value = 4;
 * @return {number}
 */
proto.protocol.SDeal.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SDeal.prototype.setValue = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SDeal.prototype.clearValue = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDeal.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 luckyCard = 5;
 * @return {number}
 */
proto.protocol.SDeal.prototype.getLuckycard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SDeal.prototype.setLuckycard = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SDeal.prototype.clearLuckycard = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDeal.prototype.hasLuckycard = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 error = 6;
 * @return {number}
 */
proto.protocol.SDeal.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SDeal.prototype.setError = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SDeal.prototype.clearError = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDeal.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SDraw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SDraw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SDraw.displayName = 'proto.protocol.SDraw';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SDraw.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SDraw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SDraw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDraw.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2005),
    card: jspb.Message.getField(msg, 2),
    value: jspb.Message.getField(msg, 3),
    kong: jspb.Message.getField(msg, 4),
    cards: msg.getCards_asB64(),
    remainder: jspb.Message.getField(msg, 6),
    error: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SDraw}
 */
proto.protocol.SDraw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SDraw;
  return proto.protocol.SDraw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SDraw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SDraw}
 */
proto.protocol.SDraw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKong(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemainder(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SDraw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SDraw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SDraw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDraw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SDraw.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2005));
};


/** @param {number} value */
proto.protocol.SDraw.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SDraw.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDraw.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 card = 2;
 * @return {number}
 */
proto.protocol.SDraw.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SDraw.prototype.setCard = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SDraw.prototype.clearCard = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDraw.prototype.hasCard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 value = 3;
 * @return {number}
 */
proto.protocol.SDraw.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SDraw.prototype.setValue = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SDraw.prototype.clearValue = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDraw.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 kong = 4;
 * @return {number}
 */
proto.protocol.SDraw.prototype.getKong = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SDraw.prototype.setKong = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SDraw.prototype.clearKong = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDraw.prototype.hasKong = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bytes cards = 5;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.SDraw.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * required bytes cards = 5;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.protocol.SDraw.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * required bytes cards = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.protocol.SDraw.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.SDraw.prototype.setCards = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SDraw.prototype.clearCards = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDraw.prototype.hasCards = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 remainder = 6;
 * @return {number}
 */
proto.protocol.SDraw.prototype.getRemainder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SDraw.prototype.setRemainder = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SDraw.prototype.clearRemainder = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDraw.prototype.hasRemainder = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 error = 7;
 * @return {number}
 */
proto.protocol.SDraw.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.SDraw.prototype.setError = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.SDraw.prototype.clearError = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDraw.prototype.hasError = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CDiscard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CDiscard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CDiscard.displayName = 'proto.protocol.CDiscard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CDiscard.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CDiscard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CDiscard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CDiscard.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2006),
    value: jspb.Message.getField(msg, 2),
    card: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CDiscard}
 */
proto.protocol.CDiscard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CDiscard;
  return proto.protocol.CDiscard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CDiscard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CDiscard}
 */
proto.protocol.CDiscard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CDiscard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CDiscard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CDiscard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CDiscard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CDiscard.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2006));
};


/** @param {number} value */
proto.protocol.CDiscard.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CDiscard.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CDiscard.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 value = 2;
 * @return {number}
 */
proto.protocol.CDiscard.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CDiscard.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CDiscard.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CDiscard.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 card = 3;
 * @return {number}
 */
proto.protocol.CDiscard.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.CDiscard.prototype.setCard = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CDiscard.prototype.clearCard = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CDiscard.prototype.hasCard = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SOtherDraw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SOtherDraw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SOtherDraw.displayName = 'proto.protocol.SOtherDraw';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SOtherDraw.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SOtherDraw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SOtherDraw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOtherDraw.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2016),
    seat: jspb.Message.getField(msg, 2),
    kong: jspb.Message.getField(msg, 3),
    remainder: jspb.Message.getField(msg, 4),
    error: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SOtherDraw}
 */
proto.protocol.SOtherDraw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SOtherDraw;
  return proto.protocol.SOtherDraw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SOtherDraw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SOtherDraw}
 */
proto.protocol.SOtherDraw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKong(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemainder(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SOtherDraw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SOtherDraw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SOtherDraw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOtherDraw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SOtherDraw.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2016));
};


/** @param {number} value */
proto.protocol.SOtherDraw.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SOtherDraw.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOtherDraw.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SOtherDraw.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SOtherDraw.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SOtherDraw.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOtherDraw.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 kong = 3;
 * @return {number}
 */
proto.protocol.SOtherDraw.prototype.getKong = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SOtherDraw.prototype.setKong = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SOtherDraw.prototype.clearKong = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOtherDraw.prototype.hasKong = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 remainder = 4;
 * @return {number}
 */
proto.protocol.SOtherDraw.prototype.getRemainder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SOtherDraw.prototype.setRemainder = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SOtherDraw.prototype.clearRemainder = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOtherDraw.prototype.hasRemainder = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 error = 5;
 * @return {number}
 */
proto.protocol.SOtherDraw.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SOtherDraw.prototype.setError = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SOtherDraw.prototype.clearError = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOtherDraw.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SDiscard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SDiscard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SDiscard.displayName = 'proto.protocol.SDiscard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SDiscard.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SDiscard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SDiscard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDiscard.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2006),
    seat: jspb.Message.getField(msg, 2),
    card: jspb.Message.getField(msg, 3),
    value: jspb.Message.getField(msg, 4),
    ting: jspb.Message.getField(msg, 5),
    error: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SDiscard}
 */
proto.protocol.SDiscard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SDiscard;
  return proto.protocol.SDiscard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SDiscard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SDiscard}
 */
proto.protocol.SDiscard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTing(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SDiscard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SDiscard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SDiscard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SDiscard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SDiscard.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2006));
};


/** @param {number} value */
proto.protocol.SDiscard.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SDiscard.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDiscard.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SDiscard.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SDiscard.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SDiscard.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDiscard.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 card = 3;
 * @return {number}
 */
proto.protocol.SDiscard.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SDiscard.prototype.setCard = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SDiscard.prototype.clearCard = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDiscard.prototype.hasCard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 value = 4;
 * @return {number}
 */
proto.protocol.SDiscard.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SDiscard.prototype.setValue = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SDiscard.prototype.clearValue = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDiscard.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 ting = 5;
 * @return {number}
 */
proto.protocol.SDiscard.prototype.getTing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SDiscard.prototype.setTing = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SDiscard.prototype.clearTing = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDiscard.prototype.hasTing = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 error = 6;
 * @return {number}
 */
proto.protocol.SDiscard.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SDiscard.prototype.setError = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SDiscard.prototype.clearError = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SDiscard.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.COperate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.COperate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.COperate.displayName = 'proto.protocol.COperate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.COperate.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.COperate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.COperate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.COperate.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2012),
    card: jspb.Message.getField(msg, 2),
    value: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.COperate}
 */
proto.protocol.COperate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.COperate;
  return proto.protocol.COperate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.COperate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.COperate}
 */
proto.protocol.COperate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.COperate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.COperate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.COperate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.COperate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.COperate.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2012));
};


/** @param {number} value */
proto.protocol.COperate.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.COperate.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.COperate.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 card = 2;
 * @return {number}
 */
proto.protocol.COperate.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.COperate.prototype.setCard = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.COperate.prototype.clearCard = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.COperate.prototype.hasCard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 value = 3;
 * @return {number}
 */
proto.protocol.COperate.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.COperate.prototype.setValue = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.COperate.prototype.clearValue = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.COperate.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SOperate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SOperate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SOperate.displayName = 'proto.protocol.SOperate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SOperate.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SOperate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SOperate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOperate.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2012),
    seat: jspb.Message.getField(msg, 2),
    beseat: jspb.Message.getField(msg, 3),
    card: jspb.Message.getField(msg, 4),
    dutycard: jspb.Message.getField(msg, 5),
    value: jspb.Message.getField(msg, 6),
    discontinue: jspb.Message.getField(msg, 7),
    error: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SOperate}
 */
proto.protocol.SOperate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SOperate;
  return proto.protocol.SOperate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SOperate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SOperate}
 */
proto.protocol.SOperate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBeseat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDutycard(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiscontinue(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SOperate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SOperate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SOperate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOperate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SOperate.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2012));
};


/** @param {number} value */
proto.protocol.SOperate.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SOperate.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOperate.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SOperate.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SOperate.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SOperate.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOperate.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 beseat = 3;
 * @return {number}
 */
proto.protocol.SOperate.prototype.getBeseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SOperate.prototype.setBeseat = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SOperate.prototype.clearBeseat = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOperate.prototype.hasBeseat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 card = 4;
 * @return {number}
 */
proto.protocol.SOperate.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SOperate.prototype.setCard = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SOperate.prototype.clearCard = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOperate.prototype.hasCard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 dutycard = 5;
 * @return {number}
 */
proto.protocol.SOperate.prototype.getDutycard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SOperate.prototype.setDutycard = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SOperate.prototype.clearDutycard = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOperate.prototype.hasDutycard = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int64 value = 6;
 * @return {number}
 */
proto.protocol.SOperate.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SOperate.prototype.setValue = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SOperate.prototype.clearValue = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOperate.prototype.hasValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int64 discontinue = 7;
 * @return {number}
 */
proto.protocol.SOperate.prototype.getDiscontinue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.SOperate.prototype.setDiscontinue = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.SOperate.prototype.clearDiscontinue = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOperate.prototype.hasDiscontinue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 error = 8;
 * @return {number}
 */
proto.protocol.SOperate.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.SOperate.prototype.setError = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.SOperate.prototype.clearError = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOperate.prototype.hasError = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SPengKong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SPengKong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SPengKong.displayName = 'proto.protocol.SPengKong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SPengKong.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SPengKong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SPengKong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPengKong.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2013),
    seat: jspb.Message.getField(msg, 2),
    card: jspb.Message.getField(msg, 3),
    value: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SPengKong}
 */
proto.protocol.SPengKong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SPengKong;
  return proto.protocol.SPengKong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SPengKong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SPengKong}
 */
proto.protocol.SPengKong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SPengKong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SPengKong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SPengKong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPengKong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SPengKong.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2013));
};


/** @param {number} value */
proto.protocol.SPengKong.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SPengKong.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPengKong.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SPengKong.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SPengKong.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SPengKong.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPengKong.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 card = 3;
 * @return {number}
 */
proto.protocol.SPengKong.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SPengKong.prototype.setCard = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SPengKong.prototype.clearCard = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPengKong.prototype.hasCard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 value = 4;
 * @return {number}
 */
proto.protocol.SPengKong.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SPengKong.prototype.setValue = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SPengKong.prototype.clearValue = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPengKong.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SHu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SHu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SHu.displayName = 'proto.protocol.SHu';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SHu.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SHu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SHu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SHu.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2030),
    seat: jspb.Message.getField(msg, 2),
    targetseat: jspb.Message.getField(msg, 3),
    card: jspb.Message.getField(msg, 4),
    error: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SHu}
 */
proto.protocol.SHu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SHu;
  return proto.protocol.SHu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SHu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SHu}
 */
proto.protocol.SHu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetseat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SHu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SHu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SHu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SHu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SHu.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2030));
};


/** @param {number} value */
proto.protocol.SHu.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SHu.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SHu.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SHu.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SHu.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SHu.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SHu.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 targetSeat = 3;
 * @return {number}
 */
proto.protocol.SHu.prototype.getTargetseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SHu.prototype.setTargetseat = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SHu.prototype.clearTargetseat = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SHu.prototype.hasTargetseat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 card = 4;
 * @return {number}
 */
proto.protocol.SHu.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SHu.prototype.setCard = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SHu.prototype.clearCard = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SHu.prototype.hasCard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 error = 5;
 * @return {number}
 */
proto.protocol.SHu.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SHu.prototype.setError = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SHu.prototype.clearError = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SHu.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CHu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CHu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CHu.displayName = 'proto.protocol.CHu';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CHu.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CHu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CHu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CHu.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2030)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CHu}
 */
proto.protocol.CHu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CHu;
  return proto.protocol.CHu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CHu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CHu}
 */
proto.protocol.CHu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CHu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CHu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CHu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CHu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CHu.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2030));
};


/** @param {number} value */
proto.protocol.CHu.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CHu.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CHu.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SGameover = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SGameover.repeatedFields_, null);
};
goog.inherits(proto.protocol.SGameover, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SGameover.displayName = 'proto.protocol.SGameover';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SGameover.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SGameover.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SGameover.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SGameover} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SGameover.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2028),
    hutype: jspb.Message.getField(msg, 2),
    paoseat: jspb.Message.getField(msg, 3),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.protocol.ProtoCount.toObject, includeInstance),
    liancount: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SGameover}
 */
proto.protocol.SGameover.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SGameover;
  return proto.protocol.SGameover.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SGameover} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SGameover}
 */
proto.protocol.SGameover.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHutype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPaoseat(value);
      break;
    case 4:
      var value = new proto.protocol.ProtoCount;
      reader.readMessage(value,proto.protocol.ProtoCount.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLiancount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SGameover.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SGameover.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SGameover} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SGameover.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protocol.ProtoCount.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SGameover.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2028));
};


/** @param {number} value */
proto.protocol.SGameover.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SGameover.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGameover.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 huType = 2;
 * @return {number}
 */
proto.protocol.SGameover.prototype.getHutype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SGameover.prototype.setHutype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SGameover.prototype.clearHutype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGameover.prototype.hasHutype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 paoSeat = 3;
 * @return {number}
 */
proto.protocol.SGameover.prototype.getPaoseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SGameover.prototype.setPaoseat = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SGameover.prototype.clearPaoseat = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGameover.prototype.hasPaoseat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ProtoCount data = 4;
 * @return {!Array.<!proto.protocol.ProtoCount>}
 */
proto.protocol.SGameover.prototype.getDataList = function() {
  return /** @type{!Array.<!proto.protocol.ProtoCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ProtoCount, 4));
};


/** @param {!Array.<!proto.protocol.ProtoCount>} value */
proto.protocol.SGameover.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protocol.ProtoCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ProtoCount}
 */
proto.protocol.SGameover.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.ProtoCount, opt_index);
};


proto.protocol.SGameover.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * required uint32 lianCount = 5;
 * @return {number}
 */
proto.protocol.SGameover.prototype.getLiancount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SGameover.prototype.setLiancount = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SGameover.prototype.clearLiancount = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGameover.prototype.hasLiancount = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CBroadcastChatText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CBroadcastChatText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CBroadcastChatText.displayName = 'proto.protocol.CBroadcastChatText';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CBroadcastChatText.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CBroadcastChatText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CBroadcastChatText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBroadcastChatText.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2043),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CBroadcastChatText}
 */
proto.protocol.CBroadcastChatText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CBroadcastChatText;
  return proto.protocol.CBroadcastChatText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CBroadcastChatText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CBroadcastChatText}
 */
proto.protocol.CBroadcastChatText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CBroadcastChatText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CBroadcastChatText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CBroadcastChatText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBroadcastChatText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CBroadcastChatText.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2043));
};


/** @param {number} value */
proto.protocol.CBroadcastChatText.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CBroadcastChatText.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBroadcastChatText.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.CBroadcastChatText.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.protocol.CBroadcastChatText.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.protocol.CBroadcastChatText.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.CBroadcastChatText.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CBroadcastChatText.prototype.clearContent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBroadcastChatText.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CBroadcastChat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CBroadcastChat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CBroadcastChat.displayName = 'proto.protocol.CBroadcastChat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CBroadcastChat.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CBroadcastChat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CBroadcastChat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBroadcastChat.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2044),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CBroadcastChat}
 */
proto.protocol.CBroadcastChat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CBroadcastChat;
  return proto.protocol.CBroadcastChat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CBroadcastChat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CBroadcastChat}
 */
proto.protocol.CBroadcastChat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CBroadcastChat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CBroadcastChat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CBroadcastChat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBroadcastChat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CBroadcastChat.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2044));
};


/** @param {number} value */
proto.protocol.CBroadcastChat.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CBroadcastChat.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBroadcastChat.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.CBroadcastChat.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.protocol.CBroadcastChat.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.protocol.CBroadcastChat.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.CBroadcastChat.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CBroadcastChat.prototype.clearContent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBroadcastChat.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SBroadcastChatText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SBroadcastChatText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SBroadcastChatText.displayName = 'proto.protocol.SBroadcastChatText';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SBroadcastChatText.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SBroadcastChatText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SBroadcastChatText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBroadcastChatText.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2043),
    seat: jspb.Message.getField(msg, 2),
    content: msg.getContent_asB64(),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SBroadcastChatText}
 */
proto.protocol.SBroadcastChatText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SBroadcastChatText;
  return proto.protocol.SBroadcastChatText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SBroadcastChatText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SBroadcastChatText}
 */
proto.protocol.SBroadcastChatText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SBroadcastChatText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SBroadcastChatText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SBroadcastChatText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBroadcastChatText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SBroadcastChatText.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2043));
};


/** @param {number} value */
proto.protocol.SBroadcastChatText.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SBroadcastChatText.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroadcastChatText.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SBroadcastChatText.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SBroadcastChatText.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SBroadcastChatText.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroadcastChatText.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.SBroadcastChatText.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.protocol.SBroadcastChatText.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.protocol.SBroadcastChatText.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.SBroadcastChatText.prototype.setContent = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SBroadcastChatText.prototype.clearContent = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroadcastChatText.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SBroadcastChatText.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SBroadcastChatText.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SBroadcastChatText.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroadcastChatText.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SBroadcastChat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SBroadcastChat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SBroadcastChat.displayName = 'proto.protocol.SBroadcastChat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SBroadcastChat.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SBroadcastChat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SBroadcastChat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBroadcastChat.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2044),
    seat: jspb.Message.getField(msg, 2),
    content: msg.getContent_asB64(),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SBroadcastChat}
 */
proto.protocol.SBroadcastChat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SBroadcastChat;
  return proto.protocol.SBroadcastChat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SBroadcastChat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SBroadcastChat}
 */
proto.protocol.SBroadcastChat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SBroadcastChat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SBroadcastChat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SBroadcastChat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBroadcastChat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SBroadcastChat.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2044));
};


/** @param {number} value */
proto.protocol.SBroadcastChat.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SBroadcastChat.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroadcastChat.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SBroadcastChat.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SBroadcastChat.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SBroadcastChat.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroadcastChat.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.SBroadcastChat.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.protocol.SBroadcastChat.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.protocol.SBroadcastChat.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.SBroadcastChat.prototype.setContent = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SBroadcastChat.prototype.clearContent = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroadcastChat.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SBroadcastChat.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SBroadcastChat.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SBroadcastChat.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBroadcastChat.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CQiangKong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CQiangKong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CQiangKong.displayName = 'proto.protocol.CQiangKong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CQiangKong.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CQiangKong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CQiangKong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CQiangKong.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2048)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CQiangKong}
 */
proto.protocol.CQiangKong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CQiangKong;
  return proto.protocol.CQiangKong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CQiangKong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CQiangKong}
 */
proto.protocol.CQiangKong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CQiangKong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CQiangKong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CQiangKong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CQiangKong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CQiangKong.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2048));
};


/** @param {number} value */
proto.protocol.CQiangKong.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CQiangKong.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CQiangKong.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SQiangKong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SQiangKong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SQiangKong.displayName = 'proto.protocol.SQiangKong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SQiangKong.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SQiangKong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SQiangKong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SQiangKong.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2048),
    seat: jspb.Message.getField(msg, 2),
    targetseat: jspb.Message.getField(msg, 3),
    card: jspb.Message.getField(msg, 4),
    error: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SQiangKong}
 */
proto.protocol.SQiangKong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SQiangKong;
  return proto.protocol.SQiangKong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SQiangKong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SQiangKong}
 */
proto.protocol.SQiangKong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetseat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SQiangKong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SQiangKong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SQiangKong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SQiangKong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SQiangKong.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2048));
};


/** @param {number} value */
proto.protocol.SQiangKong.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SQiangKong.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SQiangKong.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SQiangKong.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SQiangKong.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SQiangKong.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SQiangKong.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 targetSeat = 3;
 * @return {number}
 */
proto.protocol.SQiangKong.prototype.getTargetseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SQiangKong.prototype.setTargetseat = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SQiangKong.prototype.clearTargetseat = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SQiangKong.prototype.hasTargetseat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 card = 4;
 * @return {number}
 */
proto.protocol.SQiangKong.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SQiangKong.prototype.setCard = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SQiangKong.prototype.clearCard = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SQiangKong.prototype.hasCard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 error = 5;
 * @return {number}
 */
proto.protocol.SQiangKong.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SQiangKong.prototype.setError = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SQiangKong.prototype.clearError = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SQiangKong.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CMaiZi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CMaiZi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CMaiZi.displayName = 'proto.protocol.CMaiZi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CMaiZi.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CMaiZi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CMaiZi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CMaiZi.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2084),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CMaiZi}
 */
proto.protocol.CMaiZi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CMaiZi;
  return proto.protocol.CMaiZi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CMaiZi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CMaiZi}
 */
proto.protocol.CMaiZi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CMaiZi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CMaiZi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CMaiZi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CMaiZi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CMaiZi.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2084));
};


/** @param {number} value */
proto.protocol.CMaiZi.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CMaiZi.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CMaiZi.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 count = 2;
 * @return {number}
 */
proto.protocol.CMaiZi.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CMaiZi.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CMaiZi.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CMaiZi.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SMaiZi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SMaiZi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SMaiZi.displayName = 'proto.protocol.SMaiZi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SMaiZi.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SMaiZi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SMaiZi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SMaiZi.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2084),
    count: jspb.Message.getField(msg, 2),
    seat: jspb.Message.getField(msg, 3),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SMaiZi}
 */
proto.protocol.SMaiZi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SMaiZi;
  return proto.protocol.SMaiZi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SMaiZi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SMaiZi}
 */
proto.protocol.SMaiZi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SMaiZi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SMaiZi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SMaiZi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SMaiZi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SMaiZi.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2084));
};


/** @param {number} value */
proto.protocol.SMaiZi.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SMaiZi.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SMaiZi.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 count = 2;
 * @return {number}
 */
proto.protocol.SMaiZi.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SMaiZi.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SMaiZi.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SMaiZi.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 seat = 3;
 * @return {number}
 */
proto.protocol.SMaiZi.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SMaiZi.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SMaiZi.prototype.clearSeat = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SMaiZi.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SMaiZi.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SMaiZi.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SMaiZi.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SMaiZi.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SOffline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SOffline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SOffline.displayName = 'proto.protocol.SOffline';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SOffline.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SOffline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SOffline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOffline.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 2086),
    seat: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SOffline}
 */
proto.protocol.SOffline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SOffline;
  return proto.protocol.SOffline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SOffline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SOffline}
 */
proto.protocol.SOffline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SOffline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SOffline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SOffline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SOffline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SOffline.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2086));
};


/** @param {number} value */
proto.protocol.SOffline.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SOffline.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOffline.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SOffline.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SOffline.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SOffline.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOffline.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool status = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.SOffline.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.protocol.SOffline.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SOffline.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SOffline.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CEnterSocialRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CEnterSocialRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CEnterSocialRoom.displayName = 'proto.protocol.CEnterSocialRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CEnterSocialRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CEnterSocialRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CEnterSocialRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CEnterSocialRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7001),
    invitecode: jspb.Message.getField(msg, 2),
    longitude: +jspb.Message.getField(msg, 4),
    latitude: +jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CEnterSocialRoom}
 */
proto.protocol.CEnterSocialRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CEnterSocialRoom;
  return proto.protocol.CEnterSocialRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CEnterSocialRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CEnterSocialRoom}
 */
proto.protocol.CEnterSocialRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitecode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CEnterSocialRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CEnterSocialRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CEnterSocialRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CEnterSocialRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CEnterSocialRoom.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7001));
};


/** @param {number} value */
proto.protocol.CEnterSocialRoom.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CEnterSocialRoom.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CEnterSocialRoom.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string invitecode = 2;
 * @return {string}
 */
proto.protocol.CEnterSocialRoom.prototype.getInvitecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CEnterSocialRoom.prototype.setInvitecode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CEnterSocialRoom.prototype.clearInvitecode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CEnterSocialRoom.prototype.hasInvitecode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float longitude = 4;
 * @return {number}
 */
proto.protocol.CEnterSocialRoom.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.protocol.CEnterSocialRoom.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.CEnterSocialRoom.prototype.clearLongitude = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CEnterSocialRoom.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float latitude = 5;
 * @return {number}
 */
proto.protocol.CEnterSocialRoom.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.protocol.CEnterSocialRoom.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.CEnterSocialRoom.prototype.clearLatitude = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CEnterSocialRoom.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SEnterSocialRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SEnterSocialRoom.repeatedFields_, null);
};
goog.inherits(proto.protocol.SEnterSocialRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SEnterSocialRoom.displayName = 'proto.protocol.SEnterSocialRoom';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SEnterSocialRoom.repeatedFields_ = [4,11,20,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SEnterSocialRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SEnterSocialRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SEnterSocialRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SEnterSocialRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7001),
    position: jspb.Message.getField(msg, 2),
    room: (f = msg.getRoom()) && proto.protocol.RoomData.toObject(includeInstance, f),
    userinfoList: jspb.Message.toObjectList(msg.getUserinfoList(),
    proto.protocol.ProtoUser.toObject, includeInstance),
    beginning: jspb.Message.getField(msg, 5),
    cardscount: jspb.Message.getField(msg, 6),
    dice: jspb.Message.getField(msg, 7),
    kongcount: jspb.Message.getField(msg, 8),
    luckycard: jspb.Message.getField(msg, 9),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.protocol.ProtoCard.toObject, includeInstance),
    turn: jspb.Message.getField(msg, 12),
    handcards: msg.getHandcards_asB64(),
    value: jspb.Message.getField(msg, 14),
    watchseat: jspb.Message.getField(msg, 15),
    ready: jspb.Message.getField(msg, 16),
    score: jspb.Message.getField(msg, 17),
    ma: jspb.Message.getField(msg, 18),
    launchseat: jspb.Message.getField(msg, 19),
    voteagreeList: jspb.Message.getRepeatedField(msg, 20),
    votedisagreeList: jspb.Message.getRepeatedField(msg, 21),
    conferenceid: jspb.Message.getField(msg, 22),
    mazi: jspb.Message.getField(msg, 23),
    error: jspb.Message.getFieldWithDefault(msg, 24, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SEnterSocialRoom}
 */
proto.protocol.SEnterSocialRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SEnterSocialRoom;
  return proto.protocol.SEnterSocialRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SEnterSocialRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SEnterSocialRoom}
 */
proto.protocol.SEnterSocialRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 3:
      var value = new proto.protocol.RoomData;
      reader.readMessage(value,proto.protocol.RoomData.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 4:
      var value = new proto.protocol.ProtoUser;
      reader.readMessage(value,proto.protocol.ProtoUser.deserializeBinaryFromReader);
      msg.addUserinfo(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeginning(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCardscount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKongcount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLuckycard(value);
      break;
    case 11:
      var value = new proto.protocol.ProtoCard;
      reader.readMessage(value,proto.protocol.ProtoCard.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTurn(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHandcards(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWatchseat(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReady(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMa(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLaunchseat(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addVoteagree(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addVotedisagree(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setConferenceid(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMazi(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SEnterSocialRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SEnterSocialRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SEnterSocialRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SEnterSocialRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.RoomData.serializeBinaryToWriter
    );
  }
  f = message.getUserinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protocol.ProtoUser.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.protocol.ProtoCard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getVoteagreeList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      20,
      f
    );
  }
  f = message.getVotedisagreeList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeString(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeUint32(
      24,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7001));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 Position = 2;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearPosition = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required RoomData room = 3;
 * @return {!proto.protocol.RoomData}
 */
proto.protocol.SEnterSocialRoom.prototype.getRoom = function() {
  return /** @type{!proto.protocol.RoomData} */ (
    jspb.Message.getWrapperField(this, proto.protocol.RoomData, 3, 1));
};


/** @param {!proto.protocol.RoomData} value */
proto.protocol.SEnterSocialRoom.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearRoom = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ProtoUser userinfo = 4;
 * @return {!Array.<!proto.protocol.ProtoUser>}
 */
proto.protocol.SEnterSocialRoom.prototype.getUserinfoList = function() {
  return /** @type{!Array.<!proto.protocol.ProtoUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ProtoUser, 4));
};


/** @param {!Array.<!proto.protocol.ProtoUser>} value */
proto.protocol.SEnterSocialRoom.prototype.setUserinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protocol.ProtoUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ProtoUser}
 */
proto.protocol.SEnterSocialRoom.prototype.addUserinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.ProtoUser, opt_index);
};


proto.protocol.SEnterSocialRoom.prototype.clearUserinfoList = function() {
  this.setUserinfoList([]);
};


/**
 * required bool beginning = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.getBeginning = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.protocol.SEnterSocialRoom.prototype.setBeginning = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearBeginning = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasBeginning = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 cardsCount = 6;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getCardscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setCardscount = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearCardscount = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasCardscount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 dice = 7;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getDice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setDice = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearDice = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasDice = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 kongCount = 8;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getKongcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setKongcount = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearKongcount = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasKongcount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required uint32 luckyCard = 9;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getLuckycard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setLuckycard = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearLuckycard = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasLuckycard = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated ProtoCard cards = 11;
 * @return {!Array.<!proto.protocol.ProtoCard>}
 */
proto.protocol.SEnterSocialRoom.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.protocol.ProtoCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ProtoCard, 11));
};


/** @param {!Array.<!proto.protocol.ProtoCard>} value */
proto.protocol.SEnterSocialRoom.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.protocol.ProtoCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ProtoCard}
 */
proto.protocol.SEnterSocialRoom.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.protocol.ProtoCard, opt_index);
};


proto.protocol.SEnterSocialRoom.prototype.clearCardsList = function() {
  this.setCardsList([]);
};


/**
 * required uint32 turn = 12;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setTurn = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearTurn = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasTurn = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required bytes handcards = 13;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.SEnterSocialRoom.prototype.getHandcards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * required bytes handcards = 13;
 * This is a type-conversion wrapper around `getHandcards()`
 * @return {string}
 */
proto.protocol.SEnterSocialRoom.prototype.getHandcards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHandcards()));
};


/**
 * required bytes handcards = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHandcards()`
 * @return {!Uint8Array}
 */
proto.protocol.SEnterSocialRoom.prototype.getHandcards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHandcards()));
};


/** @param {!(string|Uint8Array)} value */
proto.protocol.SEnterSocialRoom.prototype.setHandcards = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearHandcards = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasHandcards = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required int64 value = 14;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setValue = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearValue = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasValue = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required uint32 watchseat = 15;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getWatchseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setWatchseat = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearWatchseat = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasWatchseat = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required bool ready = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.getReady = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.protocol.SEnterSocialRoom.prototype.setReady = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearReady = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasReady = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * required int32 score = 17;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setScore = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearScore = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasScore = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * required uint32 ma = 18;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getMa = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setMa = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearMa = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasMa = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * required uint32 launchSeat = 19;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getLaunchseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setLaunchseat = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearLaunchseat = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasLaunchseat = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * repeated uint32 voteAgree = 20;
 * @return {!Array.<number>}
 */
proto.protocol.SEnterSocialRoom.prototype.getVoteagreeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 20));
};


/** @param {!Array.<number>} value */
proto.protocol.SEnterSocialRoom.prototype.setVoteagreeList = function(value) {
  jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protocol.SEnterSocialRoom.prototype.addVoteagree = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


proto.protocol.SEnterSocialRoom.prototype.clearVoteagreeList = function() {
  this.setVoteagreeList([]);
};


/**
 * repeated uint32 voteDisagree = 21;
 * @return {!Array.<number>}
 */
proto.protocol.SEnterSocialRoom.prototype.getVotedisagreeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 21));
};


/** @param {!Array.<number>} value */
proto.protocol.SEnterSocialRoom.prototype.setVotedisagreeList = function(value) {
  jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protocol.SEnterSocialRoom.prototype.addVotedisagree = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


proto.protocol.SEnterSocialRoom.prototype.clearVotedisagreeList = function() {
  this.setVotedisagreeList([]);
};


/**
 * required string conferenceId = 22;
 * @return {string}
 */
proto.protocol.SEnterSocialRoom.prototype.getConferenceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.protocol.SEnterSocialRoom.prototype.setConferenceid = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearConferenceid = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasConferenceid = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * required int32 mazi = 23;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getMazi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setMazi = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearMazi = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasMazi = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional uint32 error = 24;
 * @return {number}
 */
proto.protocol.SEnterSocialRoom.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.protocol.SEnterSocialRoom.prototype.setError = function(value) {
  jspb.Message.setField(this, 24, value);
};


proto.protocol.SEnterSocialRoom.prototype.clearError = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SEnterSocialRoom.prototype.hasError = function() {
  return jspb.Message.getField(this, 24) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CPrivateLeave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CPrivateLeave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CPrivateLeave.displayName = 'proto.protocol.CPrivateLeave';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CPrivateLeave.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CPrivateLeave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CPrivateLeave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPrivateLeave.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7006)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CPrivateLeave}
 */
proto.protocol.CPrivateLeave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CPrivateLeave;
  return proto.protocol.CPrivateLeave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CPrivateLeave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CPrivateLeave}
 */
proto.protocol.CPrivateLeave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CPrivateLeave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CPrivateLeave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CPrivateLeave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPrivateLeave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CPrivateLeave.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7006));
};


/** @param {number} value */
proto.protocol.CPrivateLeave.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CPrivateLeave.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CPrivateLeave.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SPrivateLeave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SPrivateLeave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SPrivateLeave.displayName = 'proto.protocol.SPrivateLeave';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SPrivateLeave.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SPrivateLeave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SPrivateLeave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPrivateLeave.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7006),
    seat: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SPrivateLeave}
 */
proto.protocol.SPrivateLeave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SPrivateLeave;
  return proto.protocol.SPrivateLeave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SPrivateLeave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SPrivateLeave}
 */
proto.protocol.SPrivateLeave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SPrivateLeave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SPrivateLeave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SPrivateLeave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPrivateLeave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SPrivateLeave.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7006));
};


/** @param {number} value */
proto.protocol.SPrivateLeave.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SPrivateLeave.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateLeave.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SPrivateLeave.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SPrivateLeave.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SPrivateLeave.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateLeave.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 error = 3;
 * @return {number}
 */
proto.protocol.SPrivateLeave.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SPrivateLeave.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SPrivateLeave.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateLeave.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CReady.displayName = 'proto.protocol.CReady';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CReady.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7008),
    ready: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CReady}
 */
proto.protocol.CReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CReady;
  return proto.protocol.CReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CReady}
 */
proto.protocol.CReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReady(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CReady.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7008));
};


/** @param {number} value */
proto.protocol.CReady.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CReady.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CReady.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool ready = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.CReady.prototype.getReady = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.protocol.CReady.prototype.setReady = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CReady.prototype.clearReady = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CReady.prototype.hasReady = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SReady.displayName = 'proto.protocol.SReady';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SReady.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7008),
    seat: jspb.Message.getField(msg, 2),
    ready: jspb.Message.getField(msg, 3),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SReady}
 */
proto.protocol.SReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SReady;
  return proto.protocol.SReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SReady}
 */
proto.protocol.SReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReady(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SReady.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7008));
};


/** @param {number} value */
proto.protocol.SReady.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SReady.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SReady.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SReady.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SReady.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SReady.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SReady.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool ready = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.SReady.prototype.getReady = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.protocol.SReady.prototype.setReady = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SReady.prototype.clearReady = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SReady.prototype.hasReady = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SReady.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SReady.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SReady.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SReady.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SPrivateOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SPrivateOver.repeatedFields_, null);
};
goog.inherits(proto.protocol.SPrivateOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SPrivateOver.displayName = 'proto.protocol.SPrivateOver';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SPrivateOver.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SPrivateOver.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SPrivateOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SPrivateOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPrivateOver.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7009),
    cid: jspb.Message.getField(msg, 2),
    roomid: jspb.Message.getField(msg, 3),
    round: jspb.Message.getField(msg, 4),
    expire: jspb.Message.getField(msg, 5),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.PrivateScore.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SPrivateOver}
 */
proto.protocol.SPrivateOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SPrivateOver;
  return proto.protocol.SPrivateOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SPrivateOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SPrivateOver}
 */
proto.protocol.SPrivateOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpire(value);
      break;
    case 6:
      var value = new proto.protocol.PrivateScore;
      reader.readMessage(value,proto.protocol.PrivateScore.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SPrivateOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SPrivateOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SPrivateOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPrivateOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.protocol.PrivateScore.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SPrivateOver.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7009));
};


/** @param {number} value */
proto.protocol.SPrivateOver.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SPrivateOver.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateOver.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 cid = 2;
 * @return {number}
 */
proto.protocol.SPrivateOver.prototype.getCid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SPrivateOver.prototype.setCid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SPrivateOver.prototype.clearCid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateOver.prototype.hasCid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 roomid = 3;
 * @return {number}
 */
proto.protocol.SPrivateOver.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SPrivateOver.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SPrivateOver.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateOver.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 round = 4;
 * @return {number}
 */
proto.protocol.SPrivateOver.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SPrivateOver.prototype.setRound = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SPrivateOver.prototype.clearRound = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateOver.prototype.hasRound = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 expire = 5;
 * @return {number}
 */
proto.protocol.SPrivateOver.prototype.getExpire = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SPrivateOver.prototype.setExpire = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SPrivateOver.prototype.clearExpire = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateOver.prototype.hasExpire = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated PrivateScore list = 6;
 * @return {!Array.<!proto.protocol.PrivateScore>}
 */
proto.protocol.SPrivateOver.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.PrivateScore>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.PrivateScore, 6));
};


/** @param {!Array.<!proto.protocol.PrivateScore>} value */
proto.protocol.SPrivateOver.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.protocol.PrivateScore=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.PrivateScore}
 */
proto.protocol.SPrivateOver.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.protocol.PrivateScore, opt_index);
};


proto.protocol.SPrivateOver.prototype.clearListList = function() {
  this.setListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PrivateScore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PrivateScore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PrivateScore.displayName = 'proto.protocol.PrivateScore';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PrivateScore.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PrivateScore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PrivateScore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateScore.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PrivateScore}
 */
proto.protocol.PrivateScore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PrivateScore;
  return proto.protocol.PrivateScore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PrivateScore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PrivateScore}
 */
proto.protocol.PrivateScore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PrivateScore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PrivateScore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PrivateScore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateScore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required string userid = 1;
 * @return {string}
 */
proto.protocol.PrivateScore.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.PrivateScore.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PrivateScore.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateScore.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 score = 2;
 * @return {number}
 */
proto.protocol.PrivateScore.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.PrivateScore.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.PrivateScore.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateScore.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CCreatePrivateRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CCreatePrivateRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CCreatePrivateRoom.displayName = 'proto.protocol.CCreatePrivateRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CCreatePrivateRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CCreatePrivateRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CCreatePrivateRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CCreatePrivateRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7010),
    rname: jspb.Message.getField(msg, 2),
    rtype: jspb.Message.getField(msg, 3),
    maizi: jspb.Message.getField(msg, 4),
    ante: jspb.Message.getField(msg, 5),
    round: jspb.Message.getField(msg, 6),
    payment: jspb.Message.getField(msg, 7),
    ma: jspb.Message.getField(msg, 8),
    longitude: +jspb.Message.getField(msg, 10),
    latitude: +jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CCreatePrivateRoom}
 */
proto.protocol.CCreatePrivateRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CCreatePrivateRoom;
  return proto.protocol.CCreatePrivateRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CCreatePrivateRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CCreatePrivateRoom}
 */
proto.protocol.CCreatePrivateRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRtype(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMaizi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnte(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPayment(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMa(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CCreatePrivateRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CCreatePrivateRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CCreatePrivateRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CCreatePrivateRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CCreatePrivateRoom.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7010));
};


/** @param {number} value */
proto.protocol.CCreatePrivateRoom.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string rname = 2;
 * @return {string}
 */
proto.protocol.CCreatePrivateRoom.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CCreatePrivateRoom.prototype.setRname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearRname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasRname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 rtype = 3;
 * @return {number}
 */
proto.protocol.CCreatePrivateRoom.prototype.getRtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.CCreatePrivateRoom.prototype.setRtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearRtype = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasRtype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bool maizi = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.getMaizi = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.protocol.CCreatePrivateRoom.prototype.setMaizi = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearMaizi = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasMaizi = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 ante = 5;
 * @return {number}
 */
proto.protocol.CCreatePrivateRoom.prototype.getAnte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.CCreatePrivateRoom.prototype.setAnte = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearAnte = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasAnte = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 round = 6;
 * @return {number}
 */
proto.protocol.CCreatePrivateRoom.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.CCreatePrivateRoom.prototype.setRound = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearRound = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasRound = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 payment = 7;
 * @return {number}
 */
proto.protocol.CCreatePrivateRoom.prototype.getPayment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.CCreatePrivateRoom.prototype.setPayment = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearPayment = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 ma = 8;
 * @return {number}
 */
proto.protocol.CCreatePrivateRoom.prototype.getMa = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.CCreatePrivateRoom.prototype.setMa = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearMa = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasMa = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required float longitude = 10;
 * @return {number}
 */
proto.protocol.CCreatePrivateRoom.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.protocol.CCreatePrivateRoom.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearLongitude = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required float latitude = 11;
 * @return {number}
 */
proto.protocol.CCreatePrivateRoom.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.protocol.CCreatePrivateRoom.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.protocol.CCreatePrivateRoom.prototype.clearLatitude = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CCreatePrivateRoom.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SCreatePrivateRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SCreatePrivateRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SCreatePrivateRoom.displayName = 'proto.protocol.SCreatePrivateRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SCreatePrivateRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SCreatePrivateRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SCreatePrivateRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SCreatePrivateRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7010),
    rdata: (f = msg.getRdata()) && proto.protocol.RoomData.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SCreatePrivateRoom}
 */
proto.protocol.SCreatePrivateRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SCreatePrivateRoom;
  return proto.protocol.SCreatePrivateRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SCreatePrivateRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SCreatePrivateRoom}
 */
proto.protocol.SCreatePrivateRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.RoomData;
      reader.readMessage(value,proto.protocol.RoomData.deserializeBinaryFromReader);
      msg.setRdata(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SCreatePrivateRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SCreatePrivateRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SCreatePrivateRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SCreatePrivateRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.RoomData.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SCreatePrivateRoom.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7010));
};


/** @param {number} value */
proto.protocol.SCreatePrivateRoom.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SCreatePrivateRoom.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SCreatePrivateRoom.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomData rdata = 2;
 * @return {!proto.protocol.RoomData}
 */
proto.protocol.SCreatePrivateRoom.prototype.getRdata = function() {
  return /** @type{!proto.protocol.RoomData} */ (
    jspb.Message.getWrapperField(this, proto.protocol.RoomData, 2, 1));
};


/** @param {!proto.protocol.RoomData} value */
proto.protocol.SCreatePrivateRoom.prototype.setRdata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.SCreatePrivateRoom.prototype.clearRdata = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SCreatePrivateRoom.prototype.hasRdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SCreatePrivateRoom.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SCreatePrivateRoom.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SCreatePrivateRoom.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SCreatePrivateRoom.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SStart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SStart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SStart.displayName = 'proto.protocol.SStart';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SStart.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SStart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SStart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SStart.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7011),
    result: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SStart}
 */
proto.protocol.SStart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SStart;
  return proto.protocol.SStart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SStart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SStart}
 */
proto.protocol.SStart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SStart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SStart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SStart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SStart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SStart.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7011));
};


/** @param {number} value */
proto.protocol.SStart.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SStart.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SStart.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result = 2;
 * @return {number}
 */
proto.protocol.SStart.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SStart.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SStart.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SStart.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CStartGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CStartGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CStartGame.displayName = 'proto.protocol.CStartGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CStartGame.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CStartGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CStartGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CStartGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7012)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CStartGame}
 */
proto.protocol.CStartGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CStartGame;
  return proto.protocol.CStartGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CStartGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CStartGame}
 */
proto.protocol.CStartGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CStartGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CStartGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CStartGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CStartGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CStartGame.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7012));
};


/** @param {number} value */
proto.protocol.CStartGame.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CStartGame.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CStartGame.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SStartGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SStartGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SStartGame.displayName = 'proto.protocol.SStartGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SStartGame.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SStartGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SStartGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SStartGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7012),
    result: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SStartGame}
 */
proto.protocol.SStartGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SStartGame;
  return proto.protocol.SStartGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SStartGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SStartGame}
 */
proto.protocol.SStartGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SStartGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SStartGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SStartGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SStartGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SStartGame.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7012));
};


/** @param {number} value */
proto.protocol.SStartGame.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SStartGame.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SStartGame.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result = 2;
 * @return {number}
 */
proto.protocol.SStartGame.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SStartGame.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SStartGame.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SStartGame.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SStartGame.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SStartGame.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SStartGame.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SStartGame.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CLaunchVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CLaunchVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CLaunchVote.displayName = 'proto.protocol.CLaunchVote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CLaunchVote.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CLaunchVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CLaunchVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CLaunchVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7014)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CLaunchVote}
 */
proto.protocol.CLaunchVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CLaunchVote;
  return proto.protocol.CLaunchVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CLaunchVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CLaunchVote}
 */
proto.protocol.CLaunchVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CLaunchVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CLaunchVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CLaunchVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CLaunchVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CLaunchVote.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7014));
};


/** @param {number} value */
proto.protocol.CLaunchVote.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CLaunchVote.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CLaunchVote.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SLaunchVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SLaunchVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SLaunchVote.displayName = 'proto.protocol.SLaunchVote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SLaunchVote.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SLaunchVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SLaunchVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SLaunchVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7014),
    seat: jspb.Message.getField(msg, 2),
    error: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SLaunchVote}
 */
proto.protocol.SLaunchVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SLaunchVote;
  return proto.protocol.SLaunchVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SLaunchVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SLaunchVote}
 */
proto.protocol.SLaunchVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SLaunchVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SLaunchVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SLaunchVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SLaunchVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SLaunchVote.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7014));
};


/** @param {number} value */
proto.protocol.SLaunchVote.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SLaunchVote.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SLaunchVote.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 seat = 2;
 * @return {number}
 */
proto.protocol.SLaunchVote.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SLaunchVote.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SLaunchVote.prototype.clearSeat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SLaunchVote.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SLaunchVote.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SLaunchVote.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SLaunchVote.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SLaunchVote.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CVote.displayName = 'proto.protocol.CVote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CVote.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7015),
    vote: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CVote}
 */
proto.protocol.CVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CVote;
  return proto.protocol.CVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CVote}
 */
proto.protocol.CVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CVote.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7015));
};


/** @param {number} value */
proto.protocol.CVote.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CVote.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CVote.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 vote = 2;
 * @return {number}
 */
proto.protocol.CVote.prototype.getVote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CVote.prototype.setVote = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CVote.prototype.clearVote = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CVote.prototype.hasVote = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SVote.displayName = 'proto.protocol.SVote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SVote.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7015),
    vote: jspb.Message.getField(msg, 2),
    seat: jspb.Message.getField(msg, 3),
    error: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SVote}
 */
proto.protocol.SVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SVote;
  return proto.protocol.SVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SVote}
 */
proto.protocol.SVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVote(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SVote.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7015));
};


/** @param {number} value */
proto.protocol.SVote.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SVote.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SVote.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 vote = 2;
 * @return {number}
 */
proto.protocol.SVote.prototype.getVote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SVote.prototype.setVote = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SVote.prototype.clearVote = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SVote.prototype.hasVote = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 seat = 3;
 * @return {number}
 */
proto.protocol.SVote.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SVote.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SVote.prototype.clearSeat = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SVote.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SVote.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SVote.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SVote.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SVote.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SVoteResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SVoteResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SVoteResult.displayName = 'proto.protocol.SVoteResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SVoteResult.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SVoteResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SVoteResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SVoteResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7016),
    vote: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SVoteResult}
 */
proto.protocol.SVoteResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SVoteResult;
  return proto.protocol.SVoteResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SVoteResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SVoteResult}
 */
proto.protocol.SVoteResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SVoteResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SVoteResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SVoteResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SVoteResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SVoteResult.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7016));
};


/** @param {number} value */
proto.protocol.SVoteResult.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SVoteResult.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SVoteResult.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 vote = 2;
 * @return {number}
 */
proto.protocol.SVoteResult.prototype.getVote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SVoteResult.prototype.setVote = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SVoteResult.prototype.clearVote = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SVoteResult.prototype.hasVote = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CPrivateRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CPrivateRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CPrivateRecord.displayName = 'proto.protocol.CPrivateRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CPrivateRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CPrivateRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CPrivateRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPrivateRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7017),
    page: jspb.Message.getField(msg, 2),
    pagemax: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CPrivateRecord}
 */
proto.protocol.CPrivateRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CPrivateRecord;
  return proto.protocol.CPrivateRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CPrivateRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CPrivateRecord}
 */
proto.protocol.CPrivateRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPagemax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CPrivateRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CPrivateRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CPrivateRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPrivateRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CPrivateRecord.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7017));
};


/** @param {number} value */
proto.protocol.CPrivateRecord.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CPrivateRecord.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CPrivateRecord.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 page = 2;
 * @return {number}
 */
proto.protocol.CPrivateRecord.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CPrivateRecord.prototype.setPage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CPrivateRecord.prototype.clearPage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CPrivateRecord.prototype.hasPage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 pageMax = 3;
 * @return {number}
 */
proto.protocol.CPrivateRecord.prototype.getPagemax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.CPrivateRecord.prototype.setPagemax = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CPrivateRecord.prototype.clearPagemax = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CPrivateRecord.prototype.hasPagemax = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SPrivateRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SPrivateRecord.repeatedFields_, null);
};
goog.inherits(proto.protocol.SPrivateRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SPrivateRecord.displayName = 'proto.protocol.SPrivateRecord';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SPrivateRecord.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SPrivateRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SPrivateRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SPrivateRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPrivateRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7017),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.PrivateRecord.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SPrivateRecord}
 */
proto.protocol.SPrivateRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SPrivateRecord;
  return proto.protocol.SPrivateRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SPrivateRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SPrivateRecord}
 */
proto.protocol.SPrivateRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.PrivateRecord;
      reader.readMessage(value,proto.protocol.PrivateRecord.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SPrivateRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SPrivateRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SPrivateRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPrivateRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.PrivateRecord.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SPrivateRecord.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7017));
};


/** @param {number} value */
proto.protocol.SPrivateRecord.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SPrivateRecord.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateRecord.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PrivateRecord list = 2;
 * @return {!Array.<!proto.protocol.PrivateRecord>}
 */
proto.protocol.SPrivateRecord.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.PrivateRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.PrivateRecord, 2));
};


/** @param {!Array.<!proto.protocol.PrivateRecord>} value */
proto.protocol.SPrivateRecord.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.PrivateRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.PrivateRecord}
 */
proto.protocol.SPrivateRecord.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.PrivateRecord, opt_index);
};


proto.protocol.SPrivateRecord.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SPrivateRecord.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SPrivateRecord.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SPrivateRecord.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPrivateRecord.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PrivateRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.PrivateRecord.repeatedFields_, null);
};
goog.inherits(proto.protocol.PrivateRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PrivateRecord.displayName = 'proto.protocol.PrivateRecord';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.PrivateRecord.repeatedFields_ = [10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PrivateRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PrivateRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PrivateRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1),
    rid: jspb.Message.getField(msg, 2),
    invitecode: jspb.Message.getField(msg, 3),
    rname: jspb.Message.getField(msg, 4),
    ante: jspb.Message.getField(msg, 5),
    totalround: jspb.Message.getField(msg, 6),
    ma: jspb.Message.getField(msg, 7),
    coin: jspb.Message.getField(msg, 8),
    round: jspb.Message.getField(msg, 9),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.PrivateRecordDetails.toObject, includeInstance),
    listsList: jspb.Message.toObjectList(msg.getListsList(),
    proto.protocol.PrivateRecords.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PrivateRecord}
 */
proto.protocol.PrivateRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PrivateRecord;
  return proto.protocol.PrivateRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PrivateRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PrivateRecord}
 */
proto.protocol.PrivateRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitecode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnte(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalround(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMa(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoin(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 10:
      var value = new proto.protocol.PrivateRecordDetails;
      reader.readMessage(value,proto.protocol.PrivateRecordDetails.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 11:
      var value = new proto.protocol.PrivateRecords;
      reader.readMessage(value,proto.protocol.PrivateRecords.deserializeBinaryFromReader);
      msg.addLists(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PrivateRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PrivateRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PrivateRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.protocol.PrivateRecordDetails.serializeBinaryToWriter
    );
  }
  f = message.getListsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.protocol.PrivateRecords.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 time = 1;
 * @return {number}
 */
proto.protocol.PrivateRecord.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecord.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PrivateRecord.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 rid = 2;
 * @return {number}
 */
proto.protocol.PrivateRecord.prototype.getRid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecord.prototype.setRid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.PrivateRecord.prototype.clearRid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasRid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string invitecode = 3;
 * @return {string}
 */
proto.protocol.PrivateRecord.prototype.getInvitecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.PrivateRecord.prototype.setInvitecode = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.PrivateRecord.prototype.clearInvitecode = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasInvitecode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string rname = 4;
 * @return {string}
 */
proto.protocol.PrivateRecord.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.PrivateRecord.prototype.setRname = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.PrivateRecord.prototype.clearRname = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasRname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 ante = 5;
 * @return {number}
 */
proto.protocol.PrivateRecord.prototype.getAnte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecord.prototype.setAnte = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.PrivateRecord.prototype.clearAnte = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasAnte = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 totalRound = 6;
 * @return {number}
 */
proto.protocol.PrivateRecord.prototype.getTotalround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecord.prototype.setTotalround = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.PrivateRecord.prototype.clearTotalround = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasTotalround = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 ma = 7;
 * @return {number}
 */
proto.protocol.PrivateRecord.prototype.getMa = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecord.prototype.setMa = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.PrivateRecord.prototype.clearMa = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasMa = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 coin = 8;
 * @return {number}
 */
proto.protocol.PrivateRecord.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecord.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.PrivateRecord.prototype.clearCoin = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required uint32 round = 9;
 * @return {number}
 */
proto.protocol.PrivateRecord.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecord.prototype.setRound = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.protocol.PrivateRecord.prototype.clearRound = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecord.prototype.hasRound = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated PrivateRecordDetails list = 10;
 * @return {!Array.<!proto.protocol.PrivateRecordDetails>}
 */
proto.protocol.PrivateRecord.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.PrivateRecordDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.PrivateRecordDetails, 10));
};


/** @param {!Array.<!proto.protocol.PrivateRecordDetails>} value */
proto.protocol.PrivateRecord.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.protocol.PrivateRecordDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.PrivateRecordDetails}
 */
proto.protocol.PrivateRecord.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.protocol.PrivateRecordDetails, opt_index);
};


proto.protocol.PrivateRecord.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * repeated PrivateRecords lists = 11;
 * @return {!Array.<!proto.protocol.PrivateRecords>}
 */
proto.protocol.PrivateRecord.prototype.getListsList = function() {
  return /** @type{!Array.<!proto.protocol.PrivateRecords>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.PrivateRecords, 11));
};


/** @param {!Array.<!proto.protocol.PrivateRecords>} value */
proto.protocol.PrivateRecord.prototype.setListsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.protocol.PrivateRecords=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.PrivateRecords}
 */
proto.protocol.PrivateRecord.prototype.addLists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.protocol.PrivateRecords, opt_index);
};


proto.protocol.PrivateRecord.prototype.clearListsList = function() {
  this.setListsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PrivateRecordDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PrivateRecordDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PrivateRecordDetails.displayName = 'proto.protocol.PrivateRecordDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PrivateRecordDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PrivateRecordDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PrivateRecordDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecordDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2),
    uname: jspb.Message.getField(msg, 3),
    sex: jspb.Message.getField(msg, 4),
    photo: jspb.Message.getField(msg, 5),
    coin: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PrivateRecordDetails}
 */
proto.protocol.PrivateRecordDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PrivateRecordDetails;
  return proto.protocol.PrivateRecordDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PrivateRecordDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PrivateRecordDetails}
 */
proto.protocol.PrivateRecordDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSex(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoto(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PrivateRecordDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PrivateRecordDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PrivateRecordDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecordDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required uint32 seat = 1;
 * @return {number}
 */
proto.protocol.PrivateRecordDetails.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecordDetails.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PrivateRecordDetails.prototype.clearSeat = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordDetails.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userid = 2;
 * @return {string}
 */
proto.protocol.PrivateRecordDetails.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.PrivateRecordDetails.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.PrivateRecordDetails.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordDetails.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string uname = 3;
 * @return {string}
 */
proto.protocol.PrivateRecordDetails.prototype.getUname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.PrivateRecordDetails.prototype.setUname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.PrivateRecordDetails.prototype.clearUname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordDetails.prototype.hasUname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 sex = 4;
 * @return {number}
 */
proto.protocol.PrivateRecordDetails.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecordDetails.prototype.setSex = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.PrivateRecordDetails.prototype.clearSex = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordDetails.prototype.hasSex = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string photo = 5;
 * @return {string}
 */
proto.protocol.PrivateRecordDetails.prototype.getPhoto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protocol.PrivateRecordDetails.prototype.setPhoto = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.PrivateRecordDetails.prototype.clearPhoto = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordDetails.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 coin = 6;
 * @return {number}
 */
proto.protocol.PrivateRecordDetails.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecordDetails.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.PrivateRecordDetails.prototype.clearCoin = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecordDetails.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PrivateRecords = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.PrivateRecords.repeatedFields_, null);
};
goog.inherits(proto.protocol.PrivateRecords, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PrivateRecords.displayName = 'proto.protocol.PrivateRecords';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.PrivateRecords.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PrivateRecords.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PrivateRecords.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PrivateRecords} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecords.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getField(msg, 1),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.PrivateDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PrivateRecords}
 */
proto.protocol.PrivateRecords.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PrivateRecords;
  return proto.protocol.PrivateRecords.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PrivateRecords} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PrivateRecords}
 */
proto.protocol.PrivateRecords.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 2:
      var value = new proto.protocol.PrivateDetails;
      reader.readMessage(value,proto.protocol.PrivateDetails.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PrivateRecords.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PrivateRecords.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PrivateRecords} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateRecords.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.PrivateDetails.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 round = 1;
 * @return {number}
 */
proto.protocol.PrivateRecords.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.PrivateRecords.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PrivateRecords.prototype.clearRound = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateRecords.prototype.hasRound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PrivateDetails list = 2;
 * @return {!Array.<!proto.protocol.PrivateDetails>}
 */
proto.protocol.PrivateRecords.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.PrivateDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.PrivateDetails, 2));
};


/** @param {!Array.<!proto.protocol.PrivateDetails>} value */
proto.protocol.PrivateRecords.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.PrivateDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.PrivateDetails}
 */
proto.protocol.PrivateRecords.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.PrivateDetails, opt_index);
};


proto.protocol.PrivateRecords.prototype.clearListList = function() {
  this.setListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PrivateDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PrivateDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PrivateDetails.displayName = 'proto.protocol.PrivateDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PrivateDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PrivateDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PrivateDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    uname: jspb.Message.getField(msg, 1),
    coin: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PrivateDetails}
 */
proto.protocol.PrivateDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PrivateDetails;
  return proto.protocol.PrivateDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PrivateDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PrivateDetails}
 */
proto.protocol.PrivateDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PrivateDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PrivateDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PrivateDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PrivateDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required string uname = 1;
 * @return {string}
 */
proto.protocol.PrivateDetails.prototype.getUname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.PrivateDetails.prototype.setUname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.PrivateDetails.prototype.clearUname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateDetails.prototype.hasUname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 coin = 2;
 * @return {number}
 */
proto.protocol.PrivateDetails.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.PrivateDetails.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.PrivateDetails.prototype.clearCoin = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.PrivateDetails.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CPRecordByRid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CPRecordByRid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CPRecordByRid.displayName = 'proto.protocol.CPRecordByRid';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CPRecordByRid.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CPRecordByRid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CPRecordByRid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPRecordByRid.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7019),
    rid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CPRecordByRid}
 */
proto.protocol.CPRecordByRid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CPRecordByRid;
  return proto.protocol.CPRecordByRid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CPRecordByRid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CPRecordByRid}
 */
proto.protocol.CPRecordByRid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CPRecordByRid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CPRecordByRid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CPRecordByRid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPRecordByRid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CPRecordByRid.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7019));
};


/** @param {number} value */
proto.protocol.CPRecordByRid.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CPRecordByRid.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CPRecordByRid.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 rid = 2;
 * @return {number}
 */
proto.protocol.CPRecordByRid.prototype.getRid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CPRecordByRid.prototype.setRid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CPRecordByRid.prototype.clearRid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CPRecordByRid.prototype.hasRid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SPRecordByRid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SPRecordByRid.repeatedFields_, null);
};
goog.inherits(proto.protocol.SPRecordByRid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SPRecordByRid.displayName = 'proto.protocol.SPRecordByRid';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SPRecordByRid.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SPRecordByRid.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SPRecordByRid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SPRecordByRid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPRecordByRid.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 7019),
    time: jspb.Message.getField(msg, 2),
    rid: jspb.Message.getField(msg, 3),
    invitecode: jspb.Message.getField(msg, 4),
    rname: jspb.Message.getField(msg, 5),
    ante: jspb.Message.getField(msg, 6),
    totalround: jspb.Message.getField(msg, 7),
    ma: jspb.Message.getField(msg, 8),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.PrivateRecordDetails.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SPRecordByRid}
 */
proto.protocol.SPRecordByRid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SPRecordByRid;
  return proto.protocol.SPRecordByRid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SPRecordByRid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SPRecordByRid}
 */
proto.protocol.SPRecordByRid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitecode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAnte(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalround(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMa(value);
      break;
    case 9:
      var value = new proto.protocol.PrivateRecordDetails;
      reader.readMessage(value,proto.protocol.PrivateRecordDetails.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SPRecordByRid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SPRecordByRid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SPRecordByRid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPRecordByRid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.protocol.PrivateRecordDetails.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SPRecordByRid.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7019));
};


/** @param {number} value */
proto.protocol.SPRecordByRid.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SPRecordByRid.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.protocol.SPRecordByRid.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SPRecordByRid.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SPRecordByRid.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 rid = 3;
 * @return {number}
 */
proto.protocol.SPRecordByRid.prototype.getRid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SPRecordByRid.prototype.setRid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SPRecordByRid.prototype.clearRid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasRid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string invitecode = 4;
 * @return {string}
 */
proto.protocol.SPRecordByRid.prototype.getInvitecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.SPRecordByRid.prototype.setInvitecode = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SPRecordByRid.prototype.clearInvitecode = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasInvitecode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string rname = 5;
 * @return {string}
 */
proto.protocol.SPRecordByRid.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protocol.SPRecordByRid.prototype.setRname = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SPRecordByRid.prototype.clearRname = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasRname = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 ante = 6;
 * @return {number}
 */
proto.protocol.SPRecordByRid.prototype.getAnte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SPRecordByRid.prototype.setAnte = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SPRecordByRid.prototype.clearAnte = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasAnte = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 totalRound = 7;
 * @return {number}
 */
proto.protocol.SPRecordByRid.prototype.getTotalround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.SPRecordByRid.prototype.setTotalround = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.SPRecordByRid.prototype.clearTotalround = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasTotalround = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 ma = 8;
 * @return {number}
 */
proto.protocol.SPRecordByRid.prototype.getMa = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.SPRecordByRid.prototype.setMa = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.SPRecordByRid.prototype.clearMa = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasMa = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated PrivateRecordDetails list = 9;
 * @return {!Array.<!proto.protocol.PrivateRecordDetails>}
 */
proto.protocol.SPRecordByRid.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.PrivateRecordDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.PrivateRecordDetails, 9));
};


/** @param {!Array.<!proto.protocol.PrivateRecordDetails>} value */
proto.protocol.SPRecordByRid.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.protocol.PrivateRecordDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.PrivateRecordDetails}
 */
proto.protocol.SPRecordByRid.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.protocol.PrivateRecordDetails, opt_index);
};


proto.protocol.SPRecordByRid.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * optional uint32 error = 10;
 * @return {number}
 */
proto.protocol.SPRecordByRid.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.protocol.SPRecordByRid.prototype.setError = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.protocol.SPRecordByRid.prototype.clearError = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPRecordByRid.prototype.hasError = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CPing.displayName = 'proto.protocol.CPing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CPing.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9000)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CPing}
 */
proto.protocol.CPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CPing;
  return proto.protocol.CPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CPing}
 */
proto.protocol.CPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CPing.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9000));
};


/** @param {number} value */
proto.protocol.CPing.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CPing.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CPing.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SPing.displayName = 'proto.protocol.SPing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SPing.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9000),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SPing}
 */
proto.protocol.SPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SPing;
  return proto.protocol.SPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SPing}
 */
proto.protocol.SPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SPing.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9000));
};


/** @param {number} value */
proto.protocol.SPing.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SPing.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPing.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 error = 2;
 * @return {number}
 */
proto.protocol.SPing.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SPing.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SPing.prototype.clearError = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SPing.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CFeedback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CFeedback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CFeedback.displayName = 'proto.protocol.CFeedback';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CFeedback.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CFeedback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CFeedback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CFeedback.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9002),
    content: jspb.Message.getField(msg, 2),
    kind: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CFeedback}
 */
proto.protocol.CFeedback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CFeedback;
  return proto.protocol.CFeedback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CFeedback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CFeedback}
 */
proto.protocol.CFeedback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CFeedback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CFeedback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CFeedback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CFeedback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CFeedback.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9002));
};


/** @param {number} value */
proto.protocol.CFeedback.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CFeedback.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CFeedback.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string content = 2;
 * @return {string}
 */
proto.protocol.CFeedback.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CFeedback.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CFeedback.prototype.clearContent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CFeedback.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 kind = 3;
 * @return {number}
 */
proto.protocol.CFeedback.prototype.getKind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.CFeedback.prototype.setKind = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CFeedback.prototype.clearKind = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CFeedback.prototype.hasKind = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SFeedback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SFeedback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SFeedback.displayName = 'proto.protocol.SFeedback';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SFeedback.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SFeedback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SFeedback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SFeedback.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9002),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SFeedback}
 */
proto.protocol.SFeedback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SFeedback;
  return proto.protocol.SFeedback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SFeedback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SFeedback}
 */
proto.protocol.SFeedback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SFeedback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SFeedback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SFeedback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SFeedback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SFeedback.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9002));
};


/** @param {number} value */
proto.protocol.SFeedback.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SFeedback.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SFeedback.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 error = 2;
 * @return {number}
 */
proto.protocol.SFeedback.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SFeedback.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SFeedback.prototype.clearError = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SFeedback.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CNotice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CNotice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CNotice.displayName = 'proto.protocol.CNotice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CNotice.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CNotice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CNotice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CNotice.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9003)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CNotice}
 */
proto.protocol.CNotice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CNotice;
  return proto.protocol.CNotice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CNotice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CNotice}
 */
proto.protocol.CNotice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CNotice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CNotice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CNotice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CNotice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CNotice.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9003));
};


/** @param {number} value */
proto.protocol.CNotice.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CNotice.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CNotice.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SNotice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SNotice.repeatedFields_, null);
};
goog.inherits(proto.protocol.SNotice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SNotice.displayName = 'proto.protocol.SNotice';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SNotice.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SNotice.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SNotice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SNotice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SNotice.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9003),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.Notice.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SNotice}
 */
proto.protocol.SNotice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SNotice;
  return proto.protocol.SNotice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SNotice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SNotice}
 */
proto.protocol.SNotice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.Notice;
      reader.readMessage(value,proto.protocol.Notice.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SNotice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SNotice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SNotice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SNotice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.Notice.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SNotice.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9003));
};


/** @param {number} value */
proto.protocol.SNotice.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SNotice.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SNotice.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Notice list = 2;
 * @return {!Array.<!proto.protocol.Notice>}
 */
proto.protocol.SNotice.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.Notice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Notice, 2));
};


/** @param {!Array.<!proto.protocol.Notice>} value */
proto.protocol.SNotice.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.Notice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.Notice}
 */
proto.protocol.SNotice.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.Notice, opt_index);
};


proto.protocol.SNotice.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SNotice.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SNotice.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SNotice.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SNotice.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Notice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Notice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Notice.displayName = 'proto.protocol.Notice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Notice.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Notice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Notice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Notice.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    title: jspb.Message.getField(msg, 3),
    content: jspb.Message.getField(msg, 4),
    time: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Notice}
 */
proto.protocol.Notice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Notice;
  return proto.protocol.Notice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Notice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Notice}
 */
proto.protocol.Notice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Notice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Notice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Notice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Notice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.protocol.Notice.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.Notice.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.Notice.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Notice.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 type = 2;
 * @return {number}
 */
proto.protocol.Notice.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.Notice.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.Notice.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Notice.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string title = 3;
 * @return {string}
 */
proto.protocol.Notice.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.Notice.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.Notice.prototype.clearTitle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Notice.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string content = 4;
 * @return {string}
 */
proto.protocol.Notice.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.Notice.prototype.setContent = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.Notice.prototype.clearContent = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Notice.prototype.hasContent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 time = 5;
 * @return {number}
 */
proto.protocol.Notice.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.Notice.prototype.setTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.Notice.prototype.clearTime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.Notice.prototype.hasTime = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CBuy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CBuy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CBuy.displayName = 'proto.protocol.CBuy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CBuy.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CBuy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CBuy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBuy.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9006),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CBuy}
 */
proto.protocol.CBuy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CBuy;
  return proto.protocol.CBuy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CBuy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CBuy}
 */
proto.protocol.CBuy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CBuy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CBuy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CBuy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBuy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CBuy.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9006));
};


/** @param {number} value */
proto.protocol.CBuy.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CBuy.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBuy.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.CBuy.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CBuy.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CBuy.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBuy.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SBuy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SBuy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SBuy.displayName = 'proto.protocol.SBuy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SBuy.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SBuy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SBuy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBuy.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9006),
    result: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SBuy}
 */
proto.protocol.SBuy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SBuy;
  return proto.protocol.SBuy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SBuy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SBuy}
 */
proto.protocol.SBuy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SBuy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SBuy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SBuy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBuy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SBuy.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9006));
};


/** @param {number} value */
proto.protocol.SBuy.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SBuy.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBuy.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result = 2;
 * @return {number}
 */
proto.protocol.SBuy.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SBuy.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SBuy.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBuy.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SBuy.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SBuy.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SBuy.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBuy.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CBuild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CBuild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CBuild.displayName = 'proto.protocol.CBuild';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CBuild.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CBuild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CBuild} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBuild.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9007),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CBuild}
 */
proto.protocol.CBuild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CBuild;
  return proto.protocol.CBuild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CBuild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CBuild}
 */
proto.protocol.CBuild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CBuild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CBuild.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CBuild} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CBuild.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CBuild.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9007));
};


/** @param {number} value */
proto.protocol.CBuild.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CBuild.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBuild.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string id = 2;
 * @return {string}
 */
proto.protocol.CBuild.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CBuild.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CBuild.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CBuild.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SBuild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SBuild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SBuild.displayName = 'proto.protocol.SBuild';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SBuild.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SBuild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SBuild} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBuild.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9007),
    result: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SBuild}
 */
proto.protocol.SBuild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SBuild;
  return proto.protocol.SBuild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SBuild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SBuild}
 */
proto.protocol.SBuild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SBuild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SBuild.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SBuild} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SBuild.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SBuild.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9007));
};


/** @param {number} value */
proto.protocol.SBuild.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SBuild.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBuild.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result = 2;
 * @return {number}
 */
proto.protocol.SBuild.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SBuild.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SBuild.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBuild.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SBuild.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SBuild.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SBuild.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SBuild.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CActivity.displayName = 'proto.protocol.CActivity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CActivity.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9010)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CActivity}
 */
proto.protocol.CActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CActivity;
  return proto.protocol.CActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CActivity}
 */
proto.protocol.CActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CActivity.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9010));
};


/** @param {number} value */
proto.protocol.CActivity.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CActivity.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CActivity.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ProtoActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ProtoActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ProtoActivity.displayName = 'proto.protocol.ProtoActivity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ProtoActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ProtoActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ProtoActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoActivity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3),
    rewards: jspb.Message.getField(msg, 4),
    starttime: jspb.Message.getField(msg, 5),
    endtime: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ProtoActivity}
 */
proto.protocol.ProtoActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ProtoActivity;
  return proto.protocol.ProtoActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ProtoActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ProtoActivity}
 */
proto.protocol.ProtoActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRewards(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStarttime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ProtoActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ProtoActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ProtoActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.protocol.ProtoActivity.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.ProtoActivity.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.ProtoActivity.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoActivity.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 type = 2;
 * @return {number}
 */
proto.protocol.ProtoActivity.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ProtoActivity.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.ProtoActivity.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoActivity.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 count = 3;
 * @return {number}
 */
proto.protocol.ProtoActivity.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.ProtoActivity.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.ProtoActivity.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoActivity.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 rewards = 4;
 * @return {number}
 */
proto.protocol.ProtoActivity.prototype.getRewards = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.ProtoActivity.prototype.setRewards = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.ProtoActivity.prototype.clearRewards = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoActivity.prototype.hasRewards = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 starttime = 5;
 * @return {number}
 */
proto.protocol.ProtoActivity.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.ProtoActivity.prototype.setStarttime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.ProtoActivity.prototype.clearStarttime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoActivity.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 endtime = 6;
 * @return {number}
 */
proto.protocol.ProtoActivity.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.ProtoActivity.prototype.setEndtime = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.ProtoActivity.prototype.clearEndtime = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoActivity.prototype.hasEndtime = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SActivity.repeatedFields_, null);
};
goog.inherits(proto.protocol.SActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SActivity.displayName = 'proto.protocol.SActivity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SActivity.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SActivity.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9010),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.ProtoActivity.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SActivity}
 */
proto.protocol.SActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SActivity;
  return proto.protocol.SActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SActivity}
 */
proto.protocol.SActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.ProtoActivity;
      reader.readMessage(value,proto.protocol.ProtoActivity.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.ProtoActivity.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SActivity.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9010));
};


/** @param {number} value */
proto.protocol.SActivity.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SActivity.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SActivity.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProtoActivity list = 2;
 * @return {!Array.<!proto.protocol.ProtoActivity>}
 */
proto.protocol.SActivity.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.ProtoActivity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ProtoActivity, 2));
};


/** @param {!Array.<!proto.protocol.ProtoActivity>} value */
proto.protocol.SActivity.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.ProtoActivity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ProtoActivity}
 */
proto.protocol.SActivity.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.ProtoActivity, opt_index);
};


proto.protocol.SActivity.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SActivity.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SActivity.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SActivity.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SActivity.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CGetActivityRewards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CGetActivityRewards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CGetActivityRewards.displayName = 'proto.protocol.CGetActivityRewards';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CGetActivityRewards.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CGetActivityRewards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CGetActivityRewards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CGetActivityRewards.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9011),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CGetActivityRewards}
 */
proto.protocol.CGetActivityRewards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CGetActivityRewards;
  return proto.protocol.CGetActivityRewards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CGetActivityRewards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CGetActivityRewards}
 */
proto.protocol.CGetActivityRewards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CGetActivityRewards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CGetActivityRewards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CGetActivityRewards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CGetActivityRewards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CGetActivityRewards.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9011));
};


/** @param {number} value */
proto.protocol.CGetActivityRewards.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CGetActivityRewards.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CGetActivityRewards.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.CGetActivityRewards.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CGetActivityRewards.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CGetActivityRewards.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CGetActivityRewards.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SGetActivityRewards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SGetActivityRewards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SGetActivityRewards.displayName = 'proto.protocol.SGetActivityRewards';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SGetActivityRewards.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SGetActivityRewards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SGetActivityRewards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SGetActivityRewards.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9011),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SGetActivityRewards}
 */
proto.protocol.SGetActivityRewards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SGetActivityRewards;
  return proto.protocol.SGetActivityRewards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SGetActivityRewards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SGetActivityRewards}
 */
proto.protocol.SGetActivityRewards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SGetActivityRewards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SGetActivityRewards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SGetActivityRewards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SGetActivityRewards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SGetActivityRewards.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9011));
};


/** @param {number} value */
proto.protocol.SGetActivityRewards.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SGetActivityRewards.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGetActivityRewards.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 error = 2;
 * @return {number}
 */
proto.protocol.SGetActivityRewards.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SGetActivityRewards.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SGetActivityRewards.prototype.clearError = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SGetActivityRewards.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SUpdateActivity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.SUpdateActivity.repeatedFields_, null);
};
goog.inherits(proto.protocol.SUpdateActivity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SUpdateActivity.displayName = 'proto.protocol.SUpdateActivity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.SUpdateActivity.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SUpdateActivity.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SUpdateActivity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SUpdateActivity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SUpdateActivity.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9012),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.ProtoActivity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SUpdateActivity}
 */
proto.protocol.SUpdateActivity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SUpdateActivity;
  return proto.protocol.SUpdateActivity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SUpdateActivity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SUpdateActivity}
 */
proto.protocol.SUpdateActivity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.ProtoActivity;
      reader.readMessage(value,proto.protocol.ProtoActivity.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SUpdateActivity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SUpdateActivity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SUpdateActivity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SUpdateActivity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.ProtoActivity.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SUpdateActivity.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9012));
};


/** @param {number} value */
proto.protocol.SUpdateActivity.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SUpdateActivity.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SUpdateActivity.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProtoActivity list = 2;
 * @return {!Array.<!proto.protocol.ProtoActivity>}
 */
proto.protocol.SUpdateActivity.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.ProtoActivity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ProtoActivity, 2));
};


/** @param {!Array.<!proto.protocol.ProtoActivity>} value */
proto.protocol.SUpdateActivity.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.ProtoActivity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ProtoActivity}
 */
proto.protocol.SUpdateActivity.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.ProtoActivity, opt_index);
};


proto.protocol.SUpdateActivity.prototype.clearListList = function() {
  this.setListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CWechatShare = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CWechatShare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CWechatShare.displayName = 'proto.protocol.CWechatShare';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CWechatShare.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CWechatShare.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CWechatShare} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CWechatShare.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9013)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CWechatShare}
 */
proto.protocol.CWechatShare.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CWechatShare;
  return proto.protocol.CWechatShare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CWechatShare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CWechatShare}
 */
proto.protocol.CWechatShare.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CWechatShare.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CWechatShare.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CWechatShare} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CWechatShare.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CWechatShare.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9013));
};


/** @param {number} value */
proto.protocol.CWechatShare.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CWechatShare.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWechatShare.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CTradeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CTradeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CTradeList.displayName = 'proto.protocol.CTradeList';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CTradeList.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CTradeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CTradeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CTradeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9020)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CTradeList}
 */
proto.protocol.CTradeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CTradeList;
  return proto.protocol.CTradeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CTradeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CTradeList}
 */
proto.protocol.CTradeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CTradeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CTradeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CTradeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CTradeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CTradeList.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9020));
};


/** @param {number} value */
proto.protocol.CTradeList.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CTradeList.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CTradeList.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.STradeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.STradeList.repeatedFields_, null);
};
goog.inherits(proto.protocol.STradeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.STradeList.displayName = 'proto.protocol.STradeList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.STradeList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.STradeList.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.STradeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.STradeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.STradeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9020),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.ProtoTrade.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.STradeList}
 */
proto.protocol.STradeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.STradeList;
  return proto.protocol.STradeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.STradeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.STradeList}
 */
proto.protocol.STradeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.ProtoTrade;
      reader.readMessage(value,proto.protocol.ProtoTrade.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.STradeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.STradeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.STradeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.STradeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.ProtoTrade.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.STradeList.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9020));
};


/** @param {number} value */
proto.protocol.STradeList.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.STradeList.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeList.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProtoTrade list = 2;
 * @return {!Array.<!proto.protocol.ProtoTrade>}
 */
proto.protocol.STradeList.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.ProtoTrade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ProtoTrade, 2));
};


/** @param {!Array.<!proto.protocol.ProtoTrade>} value */
proto.protocol.STradeList.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.ProtoTrade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ProtoTrade}
 */
proto.protocol.STradeList.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.ProtoTrade, opt_index);
};


proto.protocol.STradeList.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.STradeList.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.STradeList.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.STradeList.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeList.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ProtoTrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ProtoTrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ProtoTrade.displayName = 'proto.protocol.ProtoTrade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ProtoTrade.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ProtoTrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ProtoTrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoTrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    count: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ProtoTrade}
 */
proto.protocol.ProtoTrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ProtoTrade;
  return proto.protocol.ProtoTrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ProtoTrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ProtoTrade}
 */
proto.protocol.ProtoTrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ProtoTrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ProtoTrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ProtoTrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoTrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.protocol.ProtoTrade.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.ProtoTrade.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.ProtoTrade.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoTrade.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 count = 2;
 * @return {number}
 */
proto.protocol.ProtoTrade.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ProtoTrade.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.ProtoTrade.prototype.clearCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoTrade.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CTradeRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CTradeRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CTradeRecord.displayName = 'proto.protocol.CTradeRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CTradeRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CTradeRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CTradeRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CTradeRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9021)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CTradeRecord}
 */
proto.protocol.CTradeRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CTradeRecord;
  return proto.protocol.CTradeRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CTradeRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CTradeRecord}
 */
proto.protocol.CTradeRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CTradeRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CTradeRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CTradeRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CTradeRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CTradeRecord.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9021));
};


/** @param {number} value */
proto.protocol.CTradeRecord.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CTradeRecord.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CTradeRecord.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.STradeRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.STradeRecord.repeatedFields_, null);
};
goog.inherits(proto.protocol.STradeRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.STradeRecord.displayName = 'proto.protocol.STradeRecord';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.STradeRecord.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.STradeRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.STradeRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.STradeRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.STradeRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9021),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.protocol.ProtoTradeRecard.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.STradeRecord}
 */
proto.protocol.STradeRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.STradeRecord;
  return proto.protocol.STradeRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.STradeRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.STradeRecord}
 */
proto.protocol.STradeRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.ProtoTradeRecard;
      reader.readMessage(value,proto.protocol.ProtoTradeRecard.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.STradeRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.STradeRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.STradeRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.STradeRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.ProtoTradeRecard.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.STradeRecord.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9021));
};


/** @param {number} value */
proto.protocol.STradeRecord.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.STradeRecord.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeRecord.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProtoTradeRecard list = 2;
 * @return {!Array.<!proto.protocol.ProtoTradeRecard>}
 */
proto.protocol.STradeRecord.prototype.getListList = function() {
  return /** @type{!Array.<!proto.protocol.ProtoTradeRecard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.ProtoTradeRecard, 2));
};


/** @param {!Array.<!proto.protocol.ProtoTradeRecard>} value */
proto.protocol.STradeRecord.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.ProtoTradeRecard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.ProtoTradeRecard}
 */
proto.protocol.STradeRecord.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.ProtoTradeRecard, opt_index);
};


proto.protocol.STradeRecord.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.STradeRecord.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.STradeRecord.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.STradeRecord.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeRecord.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ProtoTradeRecard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ProtoTradeRecard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ProtoTradeRecard.displayName = 'proto.protocol.ProtoTradeRecard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ProtoTradeRecard.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ProtoTradeRecard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ProtoTradeRecard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoTradeRecard.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ProtoTradeRecard}
 */
proto.protocol.ProtoTradeRecard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ProtoTradeRecard;
  return proto.protocol.ProtoTradeRecard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ProtoTradeRecard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ProtoTradeRecard}
 */
proto.protocol.ProtoTradeRecard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ProtoTradeRecard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ProtoTradeRecard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ProtoTradeRecard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ProtoTradeRecard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.protocol.ProtoTradeRecard.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.ProtoTradeRecard.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.ProtoTradeRecard.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoTradeRecard.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 time = 2;
 * @return {number}
 */
proto.protocol.ProtoTradeRecard.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ProtoTradeRecard.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.ProtoTradeRecard.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ProtoTradeRecard.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CTradeUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CTradeUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CTradeUserInfo.displayName = 'proto.protocol.CTradeUserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CTradeUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CTradeUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CTradeUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CTradeUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9022),
    name: jspb.Message.getField(msg, 2),
    phone: jspb.Message.getField(msg, 3),
    address: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CTradeUserInfo}
 */
proto.protocol.CTradeUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CTradeUserInfo;
  return proto.protocol.CTradeUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CTradeUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CTradeUserInfo}
 */
proto.protocol.CTradeUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CTradeUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CTradeUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CTradeUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CTradeUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CTradeUserInfo.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9022));
};


/** @param {number} value */
proto.protocol.CTradeUserInfo.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CTradeUserInfo.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CTradeUserInfo.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.protocol.CTradeUserInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CTradeUserInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CTradeUserInfo.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CTradeUserInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string phone = 3;
 * @return {string}
 */
proto.protocol.CTradeUserInfo.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.CTradeUserInfo.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CTradeUserInfo.prototype.clearPhone = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CTradeUserInfo.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string address = 4;
 * @return {string}
 */
proto.protocol.CTradeUserInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.CTradeUserInfo.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.CTradeUserInfo.prototype.clearAddress = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CTradeUserInfo.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.STradeUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.STradeUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.STradeUserInfo.displayName = 'proto.protocol.STradeUserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.STradeUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.STradeUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.STradeUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.STradeUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9022),
    name: jspb.Message.getField(msg, 2),
    phone: jspb.Message.getField(msg, 3),
    address: jspb.Message.getField(msg, 4),
    error: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.STradeUserInfo}
 */
proto.protocol.STradeUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.STradeUserInfo;
  return proto.protocol.STradeUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.STradeUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.STradeUserInfo}
 */
proto.protocol.STradeUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.STradeUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.STradeUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.STradeUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.STradeUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.STradeUserInfo.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9022));
};


/** @param {number} value */
proto.protocol.STradeUserInfo.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.STradeUserInfo.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeUserInfo.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.protocol.STradeUserInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.STradeUserInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.STradeUserInfo.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeUserInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string phone = 3;
 * @return {string}
 */
proto.protocol.STradeUserInfo.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.STradeUserInfo.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.STradeUserInfo.prototype.clearPhone = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeUserInfo.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string address = 4;
 * @return {string}
 */
proto.protocol.STradeUserInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.STradeUserInfo.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.STradeUserInfo.prototype.clearAddress = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeUserInfo.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 error = 5;
 * @return {number}
 */
proto.protocol.STradeUserInfo.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.STradeUserInfo.prototype.setError = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.STradeUserInfo.prototype.clearError = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STradeUserInfo.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CTrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CTrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CTrade.displayName = 'proto.protocol.CTrade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CTrade.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CTrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CTrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CTrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9023),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CTrade}
 */
proto.protocol.CTrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CTrade;
  return proto.protocol.CTrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CTrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CTrade}
 */
proto.protocol.CTrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CTrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CTrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CTrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CTrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CTrade.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9023));
};


/** @param {number} value */
proto.protocol.CTrade.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CTrade.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CTrade.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.CTrade.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CTrade.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CTrade.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CTrade.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.STrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.STrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.STrade.displayName = 'proto.protocol.STrade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.STrade.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.STrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.STrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.STrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9023),
    result: jspb.Message.getField(msg, 2),
    id: jspb.Message.getField(msg, 3),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.STrade}
 */
proto.protocol.STrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.STrade;
  return proto.protocol.STrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.STrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.STrade}
 */
proto.protocol.STrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.STrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.STrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.STrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.STrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.STrade.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9023));
};


/** @param {number} value */
proto.protocol.STrade.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.STrade.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STrade.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result = 2;
 * @return {number}
 */
proto.protocol.STrade.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.STrade.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.STrade.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STrade.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 id = 3;
 * @return {number}
 */
proto.protocol.STrade.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.STrade.prototype.setId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.STrade.prototype.clearId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STrade.prototype.hasId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.STrade.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.STrade.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.STrade.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.STrade.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CIapppayOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CIapppayOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CIapppayOrder.displayName = 'proto.protocol.CIapppayOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CIapppayOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CIapppayOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CIapppayOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CIapppayOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9050),
    id: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CIapppayOrder}
 */
proto.protocol.CIapppayOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CIapppayOrder;
  return proto.protocol.CIapppayOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CIapppayOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CIapppayOrder}
 */
proto.protocol.CIapppayOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CIapppayOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CIapppayOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CIapppayOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CIapppayOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CIapppayOrder.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9050));
};


/** @param {number} value */
proto.protocol.CIapppayOrder.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CIapppayOrder.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CIapppayOrder.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.CIapppayOrder.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CIapppayOrder.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CIapppayOrder.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CIapppayOrder.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SIapppayOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SIapppayOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SIapppayOrder.displayName = 'proto.protocol.SIapppayOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SIapppayOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SIapppayOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SIapppayOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SIapppayOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9050),
    transid: jspb.Message.getField(msg, 2),
    id: jspb.Message.getField(msg, 3),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SIapppayOrder}
 */
proto.protocol.SIapppayOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SIapppayOrder;
  return proto.protocol.SIapppayOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SIapppayOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SIapppayOrder}
 */
proto.protocol.SIapppayOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SIapppayOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SIapppayOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SIapppayOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SIapppayOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SIapppayOrder.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9050));
};


/** @param {number} value */
proto.protocol.SIapppayOrder.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SIapppayOrder.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SIapppayOrder.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string transid = 2;
 * @return {string}
 */
proto.protocol.SIapppayOrder.prototype.getTransid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.SIapppayOrder.prototype.setTransid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SIapppayOrder.prototype.clearTransid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SIapppayOrder.prototype.hasTransid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 id = 3;
 * @return {number}
 */
proto.protocol.SIapppayOrder.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SIapppayOrder.prototype.setId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SIapppayOrder.prototype.clearId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SIapppayOrder.prototype.hasId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SIapppayOrder.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SIapppayOrder.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SIapppayOrder.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SIapppayOrder.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CApplePay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CApplePay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CApplePay.displayName = 'proto.protocol.CApplePay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CApplePay.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CApplePay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CApplePay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CApplePay.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9052),
    id: jspb.Message.getField(msg, 2),
    receipt: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CApplePay}
 */
proto.protocol.CApplePay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CApplePay;
  return proto.protocol.CApplePay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CApplePay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CApplePay}
 */
proto.protocol.CApplePay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CApplePay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CApplePay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CApplePay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CApplePay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CApplePay.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9052));
};


/** @param {number} value */
proto.protocol.CApplePay.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CApplePay.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CApplePay.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.CApplePay.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CApplePay.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CApplePay.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CApplePay.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string receipt = 3;
 * @return {string}
 */
proto.protocol.CApplePay.prototype.getReceipt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.CApplePay.prototype.setReceipt = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CApplePay.prototype.clearReceipt = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CApplePay.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SApplePay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SApplePay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SApplePay.displayName = 'proto.protocol.SApplePay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SApplePay.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SApplePay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SApplePay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SApplePay.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9052),
    id: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SApplePay}
 */
proto.protocol.SApplePay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SApplePay;
  return proto.protocol.SApplePay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SApplePay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SApplePay}
 */
proto.protocol.SApplePay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SApplePay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SApplePay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SApplePay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SApplePay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SApplePay.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9052));
};


/** @param {number} value */
proto.protocol.SApplePay.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SApplePay.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SApplePay.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.SApplePay.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SApplePay.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SApplePay.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SApplePay.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SApplePay.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SApplePay.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SApplePay.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SApplePay.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CWxpayOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CWxpayOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CWxpayOrder.displayName = 'proto.protocol.CWxpayOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CWxpayOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CWxpayOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CWxpayOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CWxpayOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9053),
    id: jspb.Message.getField(msg, 2),
    body: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CWxpayOrder}
 */
proto.protocol.CWxpayOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CWxpayOrder;
  return proto.protocol.CWxpayOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CWxpayOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CWxpayOrder}
 */
proto.protocol.CWxpayOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CWxpayOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CWxpayOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CWxpayOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CWxpayOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CWxpayOrder.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9053));
};


/** @param {number} value */
proto.protocol.CWxpayOrder.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CWxpayOrder.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWxpayOrder.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.CWxpayOrder.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CWxpayOrder.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CWxpayOrder.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWxpayOrder.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string body = 3;
 * @return {string}
 */
proto.protocol.CWxpayOrder.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.CWxpayOrder.prototype.setBody = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.CWxpayOrder.prototype.clearBody = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWxpayOrder.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SWxpayOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SWxpayOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SWxpayOrder.displayName = 'proto.protocol.SWxpayOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SWxpayOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SWxpayOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SWxpayOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SWxpayOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9053),
    id: jspb.Message.getField(msg, 2),
    payreq: jspb.Message.getField(msg, 3),
    orderid: jspb.Message.getField(msg, 4),
    noncestr: jspb.Message.getField(msg, 5),
    error: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SWxpayOrder}
 */
proto.protocol.SWxpayOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SWxpayOrder;
  return proto.protocol.SWxpayOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SWxpayOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SWxpayOrder}
 */
proto.protocol.SWxpayOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayreq(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNoncestr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SWxpayOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SWxpayOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SWxpayOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SWxpayOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SWxpayOrder.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9053));
};


/** @param {number} value */
proto.protocol.SWxpayOrder.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SWxpayOrder.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayOrder.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 id = 2;
 * @return {number}
 */
proto.protocol.SWxpayOrder.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SWxpayOrder.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SWxpayOrder.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayOrder.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string payreq = 3;
 * @return {string}
 */
proto.protocol.SWxpayOrder.prototype.getPayreq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.SWxpayOrder.prototype.setPayreq = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SWxpayOrder.prototype.clearPayreq = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayOrder.prototype.hasPayreq = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string orderid = 4;
 * @return {string}
 */
proto.protocol.SWxpayOrder.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.SWxpayOrder.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SWxpayOrder.prototype.clearOrderid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayOrder.prototype.hasOrderid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string noncestr = 5;
 * @return {string}
 */
proto.protocol.SWxpayOrder.prototype.getNoncestr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protocol.SWxpayOrder.prototype.setNoncestr = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SWxpayOrder.prototype.clearNoncestr = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayOrder.prototype.hasNoncestr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 error = 6;
 * @return {number}
 */
proto.protocol.SWxpayOrder.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SWxpayOrder.prototype.setError = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SWxpayOrder.prototype.clearError = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayOrder.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CWxpayQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CWxpayQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CWxpayQuery.displayName = 'proto.protocol.CWxpayQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CWxpayQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CWxpayQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CWxpayQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CWxpayQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9054),
    transid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CWxpayQuery}
 */
proto.protocol.CWxpayQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CWxpayQuery;
  return proto.protocol.CWxpayQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CWxpayQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CWxpayQuery}
 */
proto.protocol.CWxpayQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CWxpayQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CWxpayQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CWxpayQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CWxpayQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CWxpayQuery.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9054));
};


/** @param {number} value */
proto.protocol.CWxpayQuery.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CWxpayQuery.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWxpayQuery.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string transid = 2;
 * @return {string}
 */
proto.protocol.CWxpayQuery.prototype.getTransid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CWxpayQuery.prototype.setTransid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CWxpayQuery.prototype.clearTransid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CWxpayQuery.prototype.hasTransid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SWxpayQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SWxpayQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SWxpayQuery.displayName = 'proto.protocol.SWxpayQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SWxpayQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SWxpayQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SWxpayQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SWxpayQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 9054),
    orderid: jspb.Message.getField(msg, 2),
    result: jspb.Message.getField(msg, 3),
    error: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SWxpayQuery}
 */
proto.protocol.SWxpayQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SWxpayQuery;
  return proto.protocol.SWxpayQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SWxpayQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SWxpayQuery}
 */
proto.protocol.SWxpayQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SWxpayQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SWxpayQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SWxpayQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SWxpayQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SWxpayQuery.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 9054));
};


/** @param {number} value */
proto.protocol.SWxpayQuery.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SWxpayQuery.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayQuery.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string orderid = 2;
 * @return {string}
 */
proto.protocol.SWxpayQuery.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.SWxpayQuery.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SWxpayQuery.prototype.clearOrderid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayQuery.prototype.hasOrderid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 result = 3;
 * @return {number}
 */
proto.protocol.SWxpayQuery.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SWxpayQuery.prototype.setResult = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SWxpayQuery.prototype.clearResult = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayQuery.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 error = 4;
 * @return {number}
 */
proto.protocol.SWxpayQuery.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SWxpayQuery.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SWxpayQuery.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SWxpayQuery.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CChangeNickname = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CChangeNickname, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CChangeNickname.displayName = 'proto.protocol.CChangeNickname';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CChangeNickname.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CChangeNickname.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CChangeNickname} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CChangeNickname.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1901),
    nickname: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CChangeNickname}
 */
proto.protocol.CChangeNickname.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CChangeNickname;
  return proto.protocol.CChangeNickname.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CChangeNickname} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CChangeNickname}
 */
proto.protocol.CChangeNickname.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CChangeNickname.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CChangeNickname.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CChangeNickname} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CChangeNickname.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CChangeNickname.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1901));
};


/** @param {number} value */
proto.protocol.CChangeNickname.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CChangeNickname.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CChangeNickname.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string nickname = 2;
 * @return {string}
 */
proto.protocol.CChangeNickname.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CChangeNickname.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CChangeNickname.prototype.clearNickname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CChangeNickname.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SChangeNickname = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SChangeNickname, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SChangeNickname.displayName = 'proto.protocol.SChangeNickname';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SChangeNickname.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SChangeNickname.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SChangeNickname} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SChangeNickname.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1901),
    nickname: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SChangeNickname}
 */
proto.protocol.SChangeNickname.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SChangeNickname;
  return proto.protocol.SChangeNickname.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SChangeNickname} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SChangeNickname}
 */
proto.protocol.SChangeNickname.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SChangeNickname.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SChangeNickname.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SChangeNickname} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SChangeNickname.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SChangeNickname.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1901));
};


/** @param {number} value */
proto.protocol.SChangeNickname.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SChangeNickname.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SChangeNickname.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string nickname = 2;
 * @return {string}
 */
proto.protocol.SChangeNickname.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.SChangeNickname.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SChangeNickname.prototype.clearNickname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SChangeNickname.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SChangeNickname.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SChangeNickname.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SChangeNickname.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SChangeNickname.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CChangeSex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CChangeSex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CChangeSex.displayName = 'proto.protocol.CChangeSex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CChangeSex.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CChangeSex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CChangeSex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CChangeSex.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1902),
    sex: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CChangeSex}
 */
proto.protocol.CChangeSex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CChangeSex;
  return proto.protocol.CChangeSex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CChangeSex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CChangeSex}
 */
proto.protocol.CChangeSex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CChangeSex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CChangeSex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CChangeSex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CChangeSex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CChangeSex.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1902));
};


/** @param {number} value */
proto.protocol.CChangeSex.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CChangeSex.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CChangeSex.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 sex = 2;
 * @return {number}
 */
proto.protocol.CChangeSex.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.CChangeSex.prototype.setSex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CChangeSex.prototype.clearSex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CChangeSex.prototype.hasSex = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SChangeSex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SChangeSex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SChangeSex.displayName = 'proto.protocol.SChangeSex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SChangeSex.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SChangeSex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SChangeSex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SChangeSex.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1902),
    sex: jspb.Message.getField(msg, 2),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SChangeSex}
 */
proto.protocol.SChangeSex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SChangeSex;
  return proto.protocol.SChangeSex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SChangeSex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SChangeSex}
 */
proto.protocol.SChangeSex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SChangeSex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SChangeSex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SChangeSex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SChangeSex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SChangeSex.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1902));
};


/** @param {number} value */
proto.protocol.SChangeSex.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SChangeSex.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SChangeSex.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 sex = 2;
 * @return {number}
 */
proto.protocol.SChangeSex.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SChangeSex.prototype.setSex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SChangeSex.prototype.clearSex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SChangeSex.prototype.hasSex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SChangeSex.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SChangeSex.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SChangeSex.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SChangeSex.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CArchieve = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CArchieve, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CArchieve.displayName = 'proto.protocol.CArchieve';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CArchieve.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CArchieve.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CArchieve} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CArchieve.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1904),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CArchieve}
 */
proto.protocol.CArchieve.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CArchieve;
  return proto.protocol.CArchieve.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CArchieve} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CArchieve}
 */
proto.protocol.CArchieve.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CArchieve.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CArchieve.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CArchieve} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CArchieve.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CArchieve.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1904));
};


/** @param {number} value */
proto.protocol.CArchieve.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CArchieve.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CArchieve.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userid = 2;
 * @return {string}
 */
proto.protocol.CArchieve.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CArchieve.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CArchieve.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CArchieve.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SArchieve = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SArchieve, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SArchieve.displayName = 'proto.protocol.SArchieve';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SArchieve.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SArchieve.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SArchieve} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SArchieve.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1904),
    best: jspb.Message.getField(msg, 2),
    maxcoin: jspb.Message.getField(msg, 3),
    gaincoin: jspb.Message.getField(msg, 4),
    singlecoin: jspb.Message.getField(msg, 5),
    qinglongdui: jspb.Message.getField(msg, 6),
    longqi: jspb.Message.getField(msg, 7),
    qingqi: jspb.Message.getField(msg, 8),
    qingdui: jspb.Message.getField(msg, 9),
    qing: jspb.Message.getField(msg, 10),
    qidui: jspb.Message.getField(msg, 11),
    pengpenghu: jspb.Message.getField(msg, 12),
    tianhu: jspb.Message.getField(msg, 13),
    dihu: jspb.Message.getField(msg, 14),
    userid: jspb.Message.getField(msg, 15),
    hutype: jspb.Message.getField(msg, 16),
    error: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SArchieve}
 */
proto.protocol.SArchieve.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SArchieve;
  return proto.protocol.SArchieve.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SArchieve} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SArchieve}
 */
proto.protocol.SArchieve.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBest(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxcoin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGaincoin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSinglecoin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQinglongdui(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLongqi(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQingqi(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQingdui(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQing(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQidui(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPengpenghu(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTianhu(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDihu(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHutype(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SArchieve.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SArchieve.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SArchieve} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SArchieve.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeUint32(
      17,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1904));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SArchieve.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string best = 2;
 * @return {string}
 */
proto.protocol.SArchieve.prototype.getBest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.SArchieve.prototype.setBest = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SArchieve.prototype.clearBest = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasBest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 maxcoin = 3;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getMaxcoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setMaxcoin = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SArchieve.prototype.clearMaxcoin = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasMaxcoin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 gaincoin = 4;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getGaincoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setGaincoin = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.protocol.SArchieve.prototype.clearGaincoin = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasGaincoin = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 singlecoin = 5;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getSinglecoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setSinglecoin = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.protocol.SArchieve.prototype.clearSinglecoin = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasSinglecoin = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 qinglongdui = 6;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getQinglongdui = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setQinglongdui = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.protocol.SArchieve.prototype.clearQinglongdui = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasQinglongdui = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 longqi = 7;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getLongqi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setLongqi = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.protocol.SArchieve.prototype.clearLongqi = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasLongqi = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 qingqi = 8;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getQingqi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setQingqi = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.protocol.SArchieve.prototype.clearQingqi = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasQingqi = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required uint32 qingdui = 9;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getQingdui = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setQingdui = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.protocol.SArchieve.prototype.clearQingdui = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasQingdui = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required uint32 qing = 10;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getQing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setQing = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.protocol.SArchieve.prototype.clearQing = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasQing = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required uint32 qidui = 11;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getQidui = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setQidui = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.protocol.SArchieve.prototype.clearQidui = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasQidui = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required uint32 pengpenghu = 12;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getPengpenghu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setPengpenghu = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.protocol.SArchieve.prototype.clearPengpenghu = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasPengpenghu = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required uint32 tianhu = 13;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getTianhu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setTianhu = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.protocol.SArchieve.prototype.clearTianhu = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasTianhu = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required uint32 dihu = 14;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getDihu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setDihu = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.protocol.SArchieve.prototype.clearDihu = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasDihu = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required string userid = 15;
 * @return {string}
 */
proto.protocol.SArchieve.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.protocol.SArchieve.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.protocol.SArchieve.prototype.clearUserid = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required uint32 hutype = 16;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getHutype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setHutype = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.protocol.SArchieve.prototype.clearHutype = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasHutype = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint32 error = 17;
 * @return {number}
 */
proto.protocol.SArchieve.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protocol.SArchieve.prototype.setError = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.protocol.SArchieve.prototype.clearError = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SArchieve.prototype.hasError = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CUserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CUserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.CUserData.displayName = 'proto.protocol.CUserData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CUserData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CUserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CUserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CUserData.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1020),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CUserData}
 */
proto.protocol.CUserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CUserData;
  return proto.protocol.CUserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CUserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CUserData}
 */
proto.protocol.CUserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CUserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CUserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CUserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CUserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.CUserData.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1020));
};


/** @param {number} value */
proto.protocol.CUserData.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.CUserData.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CUserData.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string userid = 2;
 * @return {string}
 */
proto.protocol.CUserData.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.CUserData.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.CUserData.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.CUserData.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SUserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SUserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SUserData.displayName = 'proto.protocol.SUserData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SUserData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SUserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SUserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SUserData.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1020),
    data: (f = msg.getData()) && proto.protocol.UserData.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SUserData}
 */
proto.protocol.SUserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SUserData;
  return proto.protocol.SUserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SUserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SUserData}
 */
proto.protocol.SUserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.protocol.UserData;
      reader.readMessage(value,proto.protocol.UserData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SUserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SUserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SUserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SUserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.UserData.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SUserData.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1020));
};


/** @param {number} value */
proto.protocol.SUserData.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SUserData.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SUserData.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required UserData data = 2;
 * @return {!proto.protocol.UserData}
 */
proto.protocol.SUserData.prototype.getData = function() {
  return /** @type{!proto.protocol.UserData} */ (
    jspb.Message.getWrapperField(this, proto.protocol.UserData, 2, 1));
};


/** @param {!proto.protocol.UserData} value */
proto.protocol.SUserData.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.SUserData.prototype.clearData = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SUserData.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 error = 3;
 * @return {number}
 */
proto.protocol.SUserData.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.SUserData.prototype.setError = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.protocol.SUserData.prototype.clearError = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SUserData.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.SChenmi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.SChenmi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.SChenmi.displayName = 'proto.protocol.SChenmi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.SChenmi.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.SChenmi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.SChenmi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SChenmi.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 1021),
    coin: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.SChenmi}
 */
proto.protocol.SChenmi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.SChenmi;
  return proto.protocol.SChenmi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.SChenmi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.SChenmi}
 */
proto.protocol.SChenmi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.SChenmi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.SChenmi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.SChenmi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.SChenmi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.protocol.SChenmi.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1021));
};


/** @param {number} value */
proto.protocol.SChenmi.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.protocol.SChenmi.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SChenmi.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 coin = 2;
 * @return {number}
 */
proto.protocol.SChenmi.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.SChenmi.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.protocol.SChenmi.prototype.clearCoin = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.SChenmi.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 2) != null;
};


